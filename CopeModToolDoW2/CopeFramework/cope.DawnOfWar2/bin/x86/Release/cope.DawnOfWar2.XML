<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cope.DawnOfWar2</name>
    </assembly>
    <members>
        <member name="M:cope.DawnOfWar2.AttributeXmlReader.Read(System.String,cope.DawnOfWar2.AttributeXmlReader.AdditionalInfoReader)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Failed to open file to read RelicAttribute as XML.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.AttributeXmlReader.ReadData(System.Xml.XmlReader,cope.DawnOfWar2.AttributeXmlReader.AdditionalInfoReader)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Expected node with name RelicAttribute</exception>
        </member>
        <member name="M:cope.DawnOfWar2.AttributeXmlReader.ReadValue(System.Xml.XmlReader,cope.DawnOfWar2.AttributeXmlReader.AdditionalInfoReader)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Couldn't read next node but expected an AttributeValue to start</exception>
        </member>
        <member name="M:cope.DawnOfWar2.AttributeXmlWriter.Write(System.String,cope.DawnOfWar2.RelicAttribute.AttributeStructure)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Failed to create file to write RelicAttribute to.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.AttributeXmlWriter.Write(System.IO.Stream,cope.DawnOfWar2.RelicAttribute.AttributeStructure)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.AttributeXmlWriter.WriteData(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{cope.DawnOfWar2.RelicAttribute.AttributeValue},cope.DawnOfWar2.AttributeXmlWriter.AdditionalInfoWriter)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Failed to write RelicAttributes to stream.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.AttributeXmlWriter.WriteData(System.Xml.XmlWriter,cope.DawnOfWar2.RelicAttribute.AttributeValue,cope.DawnOfWar2.AttributeXmlWriter.AdditionalInfoWriter)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Error while writing additional info via the specified info-writer!</exception>
        </member>
        <member name="P:cope.DawnOfWar2.BAF.BAFHeader.Length">
            <summary>
            Returns the byte length of a RelicBinaryFile Header.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.BAF.BAFHeader.GetFromStream(System.IO.BinaryReader)">
            <exception cref="!:RelicException"><c>RelicException</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.BAF.BAFReader.ReadIntern(System.IO.Stream)">
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.BAF.BAFWriter.Write(System.IO.Stream)">
            <exception cref="T:cope.CopeException">Error while trying to write BAF-file</exception>
        </member>
        <member name="M:cope.DawnOfWar2.BAF.BAFWriter.GetUInt32(cope.DawnOfWar2.RelicAttribute.AttributeDataType)">
            <exception cref="!:RelicException">Trying to get an uint for an invalid type.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.FieldNameFile.GetKeyByIndex(System.Int32)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.FieldNameFile.GetIndexForKey(System.String)">
            <summary>
            Gets the index for a specified key. Returns -1 if there's no such key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.FieldNameFile.AddKey(System.String)">
            <summary>
            Adds a new key and returns the index.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.DawnOfWar2.ModuleFile">
            <summary>
            Class for operating with .module files
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.#ctor(System.IO.Stream)">
            <summary>
            Load a module file and get it's data from the stream.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.CreateNewSection(System.String,System.Byte)">
            <summary>
            Creates a new section in the module file
            </summary>
            <param name="name">Name of the section, e.g. [global]</param>
            <param name="type">Set this to 0 to create a Key-Value section or to 1 to create a FileList section</param>
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Module file {0} already contains a section called {1}!</exception>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.AddToSection(System.String,System.String,System.String)">
            <summary>
            Adds a new entry to a section
            </summary>
            <param name="sectionName">The name of the section to add the new entry to</param>
            <param name="key">The Key of the value; for File List sections set this either to folder or to archive to add a folder/archive</param>
            <param name="value">The value / name of the folder / name of the archive to add</param>
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Module file {0} does not contain a section {1}!</exception>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.RemoveSection(System.String)">
            <summary>
            Removes the specified section from the module file.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.HasSection(System.String)">
            <summary>
            Returns whether a section with the specified does exist.
            </summary>
            <param name="sectionName">Name of the section to search for.</param>
            <returns></returns>
        </member>
        <member name="P:cope.DawnOfWar2.ModuleFile.Item(System.String)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Module file {0} does not contain a section {1}!</exception>
        </member>
        <member name="T:cope.DawnOfWar2.ModuleFile.SectionType">
            <summary>
            </summary>
        </member>
        <member name="T:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList">
            <summary>
            A section of Module file that consists of a folder/archive list
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.#ctor(System.String)">
            <summary>
            Creates a new Module file section with a List scheme
            </summary>
            <param name="sectionName">The name of the new section</param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.AddArchive(System.String,System.Boolean)">
            <summary>
            Adds an archive to the section
            </summary>
            <param name="archivePath">Path to the archive relative to the DoW2 directory, e.g. GameAssets\\Archives\\test.sga</param>
            <param name="top"></param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.AddFolder(System.String,System.Boolean)">
            <summary>
            Adds a folder to the section
            </summary>
            <param name="folderPath">Path to the folder relative to the DoW2 directory, e.g. GameAssets\\Data\\Test</param>
            <param name="top"></param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.AddComment(System.String,System.Int32)">
            <summary>
            Adds a comment to the section
            </summary>
            <param name="comment">String representing the comment</param>
            <param name="position">Line in which to add the comment relative to the beginning of the section ([sectionname] = line 0) thus position can NOT be 0</param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.RemoveArchive(System.String)">
            <summary>
            Removes an archive with a specific path from the section
            </summary>
            <param name="archivePath">Path of the archive to be removed, e.g. GameAssets\\Archives\\test.sga</param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.RemoveFolder(System.String)">
            <summary>
            Removes a folder with a specific path from the section
            </summary>
            <param name="folderPath">Path of the folder to be removed, e.g. GameAssets\\Data\\Test</param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.ArchiveExists(System.String)">
            <summary>
            Returns if an archive with that name already exists in that section of the file
            </summary>
            <param name="archiveName">Name of the archive to check for existence</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.FolderExists(System.String)">
            <summary>
            Returns if a folder with that name already exists in that section of the file
            </summary>
            <param name="folderName">Name of the folder to check for existence</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.CommentInLine(System.Int32,System.Boolean@,System.Int32@)">
            <summary>
            Checks if there's a comment for the specified line
            </summary>
            <param name="line">The index of the line to check</param>
            <param name="commentExists">OUT parameter - true if there is a comment for the specified line</param>
            <param name="commentIndex">OUT parameter - index of the comment in comments-list</param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.Exists(System.String,System.String)">
            <summary>
            Checks whether the input value already exists.
            </summary>
            <param name="type">Either 'folder' or 'archive'.</param>
            <param name="value">The value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.Add(System.String,System.String)">
            <summary>
            Add an archive or folder to the section
            </summary>
            <param name="key">Set to 'folder' (without '') for adding a folder (or to 'archive' (without '') to add an archive)</param>
            <param name="value">Path to the folder/archive relative to the DoW2 directory, e.g. GameAssets\\Data\\Test(.sga if it's an archive)</param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.GetLastLine">
            <summary>
            Returns the last line in use by this section relative to the first line of the section. This is useful when adding a comment to the end of the section.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.GetArchiveByIndex(System.Int32)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Section {0} does not have any archive at index {1}!</exception>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.GetFolderByIndex(System.Int32)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Section {0} does not have any archive at index {1}!</exception>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionFileList.GetCommentAtIndex(System.Int32)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Section {0} does not have any archive at index {1}!</exception>
        </member>
        <member name="T:cope.DawnOfWar2.ModuleFile.ModuleSectionKeyValue">
            <summary>
            A section of a Module file that bases on a Key-Value scheme like the [global]-section
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionKeyValue.#ctor(System.String)">
            <summary>
            Creates a new Module file section with a Key-Value scheme
            </summary>
            <param name="sectionName">Name of the new section</param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionKeyValue.SetValue(System.String,System.String)">
            <summary>
            Adds a Key-Value pair to the section or overrides an existing
            </summary>
            <param name="key">The key to be added as a string; use "comment" to add a comment</param>
            <param name="value">The value connected to the key to be added as a string</param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionKeyValue.RemoveKey(System.String)">
            <summary>
            Removes a Key-Value from the section
            </summary>
            <param name="key">Name of the Key to remove</param>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionKeyValue.GetByKey(System.String)">
            <summary>
            Gets a value by it's key, throws a KeyNotFoundException if the specified key does not exist.
            </summary>
            <param name="key">Key to search for.</param>
            <returns></returns>
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Section {0} does not contain a value with key {1}!</exception>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionKeyValue.KeyExists(System.String)">
            <summary>
            Checks if a Key already exists
            </summary>
            <param name="keySearch">Key to search for</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionKeyValue.Exists(System.String,System.String)">
            <summary>
            Checks whether the input value already exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.ModuleFile.ModuleSectionKeyValue.Add(System.String,System.String)">
            <summary>
            Add a key/value pair to the section
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="P:cope.DawnOfWar2.RB2FileExtractor.NumFiles">
            <summary>
             Gets the number of files in this RB2File.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RB2FileExtractor.PerformConversion">
            <summary>
             Get or sets whether to convert the RBF files in this RB2 file to pre-Retribution format.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RB2FileExtractor.Read(System.IO.Stream)">
            <exception cref="T:System.Exception">File is not a RB2 file! Invalid signature found.</exception>
        </member>
        <member name="T:cope.DawnOfWar2.RelicAttribute.AttributeIterator">
            <summary>
             Provides static functions to call processor-methods on every AttributeValue in a tree of AttributeValues.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeIterator.DoForAll(cope.DawnOfWar2.RelicAttribute.AttributeValue,cope.DawnOfWar2.RelicAttribute.IAttributeProcessor)">
            <summary>
             Calls the Process method of the specified processor on the given starting value and all its children.
            </summary>
            <param name="startingValue"></param>
            <param name="processor"></param>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeIterator.DoForAll(System.Collections.Generic.IEnumerable{cope.DawnOfWar2.RelicAttribute.AttributeValue},cope.DawnOfWar2.RelicAttribute.IAttributeProcessor)">
            <summary>
             Calls the Process method of the specified processor on the given starting values and all their children.
            </summary>
            <param name="startingValues"></param>
            <param name="processor"></param>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeIterator.DoForAll``1(cope.DawnOfWar2.RelicAttribute.AttributeValue,cope.DawnOfWar2.RelicAttribute.IAttributeProcessor{``0})">
            <summary>
             Calls the Process method of the specified processor on the given starting value and all its childs
             and returns the results of the calls.
            </summary>
            <param name="startingValue"></param>
            <param name="processor"></param>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeIterator.DoForAll``1(System.Collections.Generic.IEnumerable{cope.DawnOfWar2.RelicAttribute.AttributeValue},cope.DawnOfWar2.RelicAttribute.IAttributeProcessor{``0})">
            <summary>
             Calls the Process method of the specified processor on the given starting values and all their childs
             and returns the results of the calls.
            </summary>
            <param name="startingValues"></param>
            <param name="processor"></param>
        </member>
        <member name="T:cope.DawnOfWar2.RelicAttribute.AttributeDataType">
            <summary>
             This enumeration holds the different data types usable in Relic AttributeValues.
            </summary>
        </member>
        <member name="T:cope.DawnOfWar2.RelicAttribute.AttributeSearch">
            <summary>
             Helper class for searching through attribute structures.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeSearch.SearchForKey(cope.DawnOfWar2.RelicAttribute.AttributeValue,System.String,System.Boolean)">
            <summary>
             Searches for AttributeValues with the specified key.
            </summary>
            <param name="startingValue">This is the starting point of the search.</param>
            <param name="key">The key to search for.</param>
            <param name="fullText">Set to true to enable full-text search.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeSearch.SearchForKey(System.Collections.Generic.IEnumerable{cope.DawnOfWar2.RelicAttribute.AttributeValue},System.String,System.Boolean)">
            <summary>
             Searches for AttributeValues with the specified key.
            </summary>
            <param name="startingValues">These are the starting points of the search.</param>
            <param name="key">The key to search for.</param>
            <param name="fullText">Set to true to enable full-text search.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeSearch.SearchForValue(cope.DawnOfWar2.RelicAttribute.AttributeValue,System.String,System.Boolean)">
            <summary>
             Searches for AttributeValues with the specified value (strings only).
            </summary>
            <param name="startingValue">This is the starting point of the search.</param>
            <param name="value">The key to search for.</param>
            <param name="fullText">Set to true to enable full-text search.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeSearch.SearchForValue(System.Collections.Generic.IEnumerable{cope.DawnOfWar2.RelicAttribute.AttributeValue},System.String,System.Boolean)">
            <summary>
             Searches for AttributeValues with the specified value (strings only).
            </summary>
            <param name="startingValues">These are the starting points of the search.</param>
            <param name="value">The key to search for.</param>
            <param name="fullText">Set to true to enable full-text search.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeSearch.Search(cope.DawnOfWar2.RelicAttribute.AttributeValue,cope.DawnOfWar2.RelicAttribute.IAttributeMatchCondition)">
            <summary>
            Searches for AttributeValues that the satisfy the given condition.
            </summary>
            <param name="startingValue">The starting point of the search.</param>
            <param name="condition">The condition that must be satified.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeSearch.Search(System.Collections.Generic.IEnumerable{cope.DawnOfWar2.RelicAttribute.AttributeValue},cope.DawnOfWar2.RelicAttribute.IAttributeMatchCondition)">
            <summary>
            Searches for AttributeValues that the satisfy the given condition.
            </summary>
            <param name="startingValues">The starting point of the search.</param>
            <param name="condition">The condition that must be satified.</param>
            <returns></returns>
        </member>
        <member name="T:cope.DawnOfWar2.RelicAttribute.AttributeValue">
            <summary>
             This class represents a single value within a RelicAttribute structure.
             It always contains a Key, a Value (Data) and a DataType.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.#ctor(cope.DawnOfWar2.RelicAttribute.AttributeDataType,System.String,System.Object)">
            <summary>
             Constructs a new AttributeValue given a type, a key and some data.
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.#ctor(System.String,System.Object)">
            <summary>
             Constructs a new AttributeValue given a key and data. Tries to deduct the type of data and sets
             the DataType accordingly.
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.GClone">
            <summary>
            Returns a deep-copy of this instance of AttributeValue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.IsOfRightType(System.Object,cope.DawnOfWar2.RelicAttribute.AttributeDataType)">
            <summary>
             Checks whether the specified Data-object is of the specified type.
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.GetTypeForData(System.Object)">
            <summary>
             Returns the AttributeDataType suitable for the specified Data-object.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.ConvertStringToData(System.String,cope.DawnOfWar2.RelicAttribute.AttributeDataType)">
            <summary>
            Tries to convert the given string to a proper Data-object using the specified AttributeDataType. Throws an exception if it fails
            to convert the value or returns null there's no suitable conversion available.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.ConvertStringToType(System.String)">
            <summary>
             Returns the DataType corresponding to/described by the given string.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.ConvertDataToString(cope.DawnOfWar2.RelicAttribute.AttributeValue)">
            <summary>
            Converts the value of the specified AttributeValue to its representation as a string.
            </summary>
            <param name="attribValue"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValue.GetPath">
            <summary>
            Returns the path of this instance of AttributeValue.
            </summary>
            <returns></returns>
        </member>
        <member name="P:cope.DawnOfWar2.RelicAttribute.AttributeValue.DataType">
            <summary>
            Get or sets the DataType of this instance. Changing the DataType will clear the Data-field.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicAttribute.AttributeValue.Data">
            <summary>
            Gets or sets the Data held by this instance. Make sure to set the DataType to the proper type or you'll get an exception.
            </summary>
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="P:cope.DawnOfWar2.RelicAttribute.AttributeValue.AdditionalInfo">
            <summary>
             Allows additional information to be stored.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicAttribute.AttributeValue.Key">
            <summary>
            Gets or sets the Key of this instance.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicAttribute.AttributeValue.Parent">
            <summary>
            Gets the parent (the AttributeTable holding this value) of this instance of AttributeValue.
            </summary>
        </member>
        <member name="T:cope.DawnOfWar2.RelicAttribute.AttributeValueEnumerator">
            <summary>
            Enumerator for AttributeValues. Will traverse whole trees of AttributeValues,
            but as always with enumerators: Don't change the Enumeration while enumerating!
            This implementation follows the principles of DepthFirstSearching.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValueEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValueEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">The AttributeTree has been changed during the iteration!Don't change the parents of AttributeValues during the iteration.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.AttributeValueEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:cope.DawnOfWar2.RelicAttribute.AttributeValueEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:cope.DawnOfWar2.RelicAttribute.AttributeValueEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.CorsixStyleConverter.Parse(System.String[],System.Char)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.CorsixStyleConverter.SplitIntoKeyAndValue(System.String,System.String@,System.String@,System.Char)">
            <summary>
            Takes a line and splits it into a key and a value string.
            </summary>
            <param name="line"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="separator"></param>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.CorsixStyleConverter.ProcessKeyValue(System.String,System.String,System.Func{System.String},System.Char)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Error parsing Corsix-style text: Unexpected end of file. Expected '};' instead!</exception>
        </member>
        <member name="T:cope.DawnOfWar2.RelicAttribute.IAttributeProcessor`1">
            <summary>
            Interface used by the AttributeIterator.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.IAttributeProcessor`1.Process(cope.DawnOfWar2.RelicAttribute.AttributeValue)">
            <summary>
             This method is called by AttributeIterator on every single AttributeValue.
             Its return value is then added to the collection of return values.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:cope.DawnOfWar2.RelicAttribute.IAttributeProcessor">
            <summary>
            Interface used by the AttributeIterator.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicAttribute.IAttributeProcessor.Process(cope.DawnOfWar2.RelicAttribute.AttributeValue)">
            <summary>
             This method is called by AttributeIterator on every single AttributeValue.
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:cope.DawnOfWar2.RelicAttribute.AttributeStructure">
            <summary>
            Represents the attribute structure held by RBF files.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicAttribute.AttributeStructure.Root">
            <summary>
             Gets the root value of this instance.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.IRBFKeyProvider.GetKeyByIndex(System.Int32)">
            <summary>
            Returns the key at the given index. May throw exceptions.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.IRBFKeyProvider.GetIndexForKey(System.String)">
            <summary>
            Returns the index for the key or -1 if the key could not be found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.IRBFKeyProvider.AddKey(System.String)">
            <summary>
            Adds a key and returns the index.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.IRBFKeyProvider.NeedsUpdate">
            <summary>
            Returns whether this IRBFKeyProvider needs to be updated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.IRBFKeyProvider.Update">
            <summary>
            Called when the new keys have been added to the IRBFKeyProvider.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.RBFReader.Read(System.IO.Stream)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.RBFWriter.Write(System.IO.Stream)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.RBFWriter.GetIndexForKey(System.String)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.RBFHeader.#ctor">
            <summary>
            Returns a totally uninitalized RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.RBFHeader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Returns a new instance of RelicBinaryFileHeader which got it's data from the specified stream.
            </summary>
            <param name="str"></param>
            <param name="isInRb2Mode"></param>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.RBFHeader.#ctor(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Returns a new instance of RelicBinaryFileHeader which got it's data from the specified BinaryReader.
            </summary>
            <param name="br"></param>
            <param name="isInRb2Mode"></param>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.Length">
            <summary>
            Returns the byte length of a RelicBinaryFile Header.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.TableArrayOffset">
            <summary>
            Gets or sets the offset of the TableArray of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.TableArrayCount">
            <summary>
            Gets or sets the entry-count of the TableArray of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.KeyArrayOffset">
            <summary>
            Gets or sets the offset of the KeyArray of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.KeyArrayCount">
            <summary>
            Gets or sets the entry-count of the KeyArray of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.DataIndexArrayOffset">
            <summary>
            Gets or sets the offset of the DataIndexArray of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.DataIndexArrayCount">
            <summary>
            Gets or sets the entry-count of the DataIndexArray of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.DataArrayOffset">
            <summary>
            Gets or sets the offset of the DataArray of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.DataArrayCount">
            <summary>
            Gets or sets the entry-count of the DataArray of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.StringSectionOffset">
            <summary>
            Gets or sets the offset of the StringSection of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicBinary.RBFHeader.StringSectionLength">
            <summary>
            Gets or sets the byte-length of the StringSection of this instance of RelicBinaryFileHeader.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.RBFHeader.GetFromStream(System.IO.BinaryReader,System.Boolean)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.RelicBinaryFile.Read(System.IO.Stream)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Trying to read RBF-file using a key provider but no key provider has been specified!</exception>
        </member>
        <member name="M:cope.DawnOfWar2.RelicBinary.RelicBinaryFile.Write(System.IO.Stream)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Error while trying to write RBF data! See inner exception.</exception>
        </member>
        <member name="F:cope.DawnOfWar2.RelicChunky.Chunks.ACTNAction.m_params">
            <summary>
            The parameters used for this action.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.Chunks.ACTNAction.Delay">
            <summary>
            Gets or sets the Delay of this action.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.Chunks.ACTNAction.Name">
            <summary>
            Gets the name of this action
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.Chunks.ACTNAction.Length">
            <summary>
            Gets the length of the action in bytes.
            </summary>
        </member>
        <member name="T:cope.DawnOfWar2.RelicChunky.Chunks.FoldChunk">
            <summary>
            Class for all FOLD*-Chunks.
            </summary>
        </member>
        <member name="F:cope.DawnOfWar2.RelicChunky.Chunks.FoldChunk.m_chunks">
            <summary>
            The subchunks of this folder chunk.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.Chunks.FoldChunk.SubChunks">
            <summary>
            Gets the list of subchunks.
            </summary>
        </member>
        <member name="T:cope.DawnOfWar2.RelicChunky.RelicChunk">
            <summary>
            Class representing a Chunk held by a RelicChunkyFile
            </summary>
        </member>
        <member name="F:cope.DawnOfWar2.RelicChunky.RelicChunk.m_parent">
            <summary>
            The parent of this instance of RelicChunk.
            </summary>
        </member>
        <member name="F:cope.DawnOfWar2.RelicChunky.RelicChunk.m_rawData">
            <summary>
            The initial rawData of this RelicChunk.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunk.#ctor(cope.DawnOfWar2.RelicChunky.RelicChunkHeader)">
            <summary>
            Constructs a new RelicChunk from the specified ChunkHeader.
            </summary>
            <param name="header">Header of the RelicChunk.</param>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunk.ChunkHeader">
            <summary>
            Gets or sets the Header of this RelicChunk
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunk.RawData">
            <summary>
            Gets the initial rawData of this RelicChunk.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunk.Parent">
            <summary>
            Gets or sets the _parent.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunk.GetFromStream(System.IO.Stream)">
            <summary>
            Reads the RelicChunk from a stream, skips the header if it's already present.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunk.GetFromStream(System.IO.BinaryReader)">
            <summary>
            Reads the RelicChunk from a stream, skips the header if it's already present.
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunk.GClone">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="F:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.m_signature">
            <summary>
            The signature of this RelicChunkHeader, e.g. ACTN
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.#ctor(System.IO.Stream,System.UInt32)">
            <summary>
            Constructs a new RelicChunkHeader and initializes it with data read from the stream.
            </summary>
            <param name="str">Stream to read data from.</param>
            <param name="fileVersion"></param>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.#ctor">
            <summary>
            Constructs a new RelicChunkHeader which is totally uninitialized.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.Length">
            <summary>
            Gets the length of the Header.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.LengthWithoutName">
            <summary>
            Gets the length of the Header without the name of the chunk.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.Name">
            <summary>
            Gets or sets the name of this RelicChunkHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.Signature">
            <summary>
            Gets or sets the signature of this RelicChunkData.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.SignatureAsByte">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Invalid Chunk Identifier: Wrong size! Must be 4 Bytes!</exception>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.MinVersion">
            <summary>
            Gets or sets the MinVersion of this RelicChunky.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.ChunkSize">
            <summary>
            Gets or sets the chunkSize of this RelicChunkHeader. Be careful with setting it!
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.Flags">
            <summary>
            Gets or sets the Flags of this RelicChunkHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.Version">
            <summary>
            Gets or sets the version of this Chunk.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.Type">
            <summary>
            Gets or sets the type of this Chunk (either DATA or FOLD).
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.TypeString">
            <summary>
            Gets the string connected to this Chunk's type.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkHeader.FileVersion">
            <summary>
            Gets or sets the version of the file this chunk is in.
            </summary>
        </member>
        <member name="T:cope.DawnOfWar2.RelicChunky.RelicChunkyFile">
            <summary>
            FileFormat for RelicChunkyFiles.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunkyFile.#ctor(System.IO.Stream)">
            <summary>
            Constructs a new RelicChunkyFile.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunkyFile.#ctor(cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader,cope.DawnOfWar2.RelicChunky.RelicChunk)">
            <summary>
            Constructs a new RelicChunkyFile and initializes it.
            </summary>
            <param name="header">The header of the RelicChunkyFile.</param>
            <param name="chunk">The chunk hold by the RelicChunkyFile.</param>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkyFile.FileHeader">
            <summary>
            Gets or sets the FileHeader of this RelicChunkyFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkyFile.Chunks">
            <summary>
            Gets or sets the Chunks of this RelicChunkyFile.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader.#ctor(System.IO.Stream)">
            <summary>
            Constructs a new RelicChunkyFileHeader getting the data from the stream.
            </summary>
            <param name="str">Stream to fetch the data from.</param>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader.#ctor">
            <summary>
            Constructs a new RelicChunkyFileHeader without any initialized data.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader.Signature">
            <summary>
            Gets the signature of the RelicChunkyFileHeader.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader.FileHeaderSize">
            <summary>
            Gets the size of the RelicChunkyFileHeader in bytes.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader.ChunkHeaderSize">
            <summary>
            Gets or sets the size of the header of the first Chunk of the RelicChunkyFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader.MinVersion">
            <summary>
            Gets or sets the MinVersion of this RelicChunky, DawnOfWar2 uses everything including version 3.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader.Platform">
            <summary>
            Gets or sets the Platform of this RelicChunkyFileHeader, set it to 1 for PC.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader.Version">
            <summary>
            Gets or sets the version of this RelicChunkyFileHeader, DawnOfWar2 uses everything including version 3.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.RelicChunky.RelicChunkyFileHeader.GetFromStream(System.IO.BinaryReader)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">This is not a RelicChunky file!</exception>
        </member>
        <member name="M:cope.DawnOfWar2.SGANew.SGAFileHeader.Read(System.IO.BinaryReader)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.SGANew.SGAReader.Read(System.IO.Stream)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Error while reading header of SGA file.</exception>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAContainer.DirectoryFirst">
            <summary>
            Gets or sets the index of the first directory contained by this EntryPoint.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAContainer.DirectoryLast">
            <summary>
            Gets or sets the index of the first directory not contained by this EntryPoint anymore.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAContainer.FileFirst">
            <summary>
            Gets or sets the index of the first file contained by this EntryPoint.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAContainer.FileLast">
            <summary>
            Gets or sets the index of the first file not contained by this EntryPoint anymore.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAContainer.DirectoryCount">
            <summary>
            Gets the number of directories stored in this EntryPoint (non-recursive!).
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAContainer.FileCount">
            <summary>
            Gets the number of files stored in this EntryPoint (non-recursive!).
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAContainer.Name">
            <summary>
            Gets or sets the name of this SGAContainer.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAContainer.Parent">
            <summary>
            Gets or sets the parent of this Container.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAContainer.AddDirectory(cope.DawnOfWar2.SGA.SGAStoredDirectory)">
            <summary>
            Adds the specified SGADirectory to this Container.
            </summary>
            <param name="sd">SGADirectory to add.</param>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAContainer.RemoveDirectory(cope.DawnOfWar2.SGA.SGAStoredDirectory)">
            <summary>
            Removes the specified SGADirectory from this Container.
            </summary>
            <param name="sd">SGADirectory to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAContainer.AddFile(cope.DawnOfWar2.SGA.SGAStoredFile)">
            <summary>
            Adds the specified SGAFile to this Container.
            </summary>
            <param name="sf">SGAFile to add.</param>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAContainer.RemoveFile(cope.DawnOfWar2.SGA.SGAStoredFile)">
            <summary>
            Removes the specified SGAFile from this Container.
            </summary>
            <param name="sf">SGAFile to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAContainer.GetDirectoryAt(System.String)">
            <summary>
            Returns the SGADirectory with the given name / path.
            </summary>
            <param name="name">Path of the SGADirectory, e.g. "simulation\attrib\tuning\".</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAContainer.GetFileAt(System.String)">
            <summary>
            Returns the SGAfile at the given path.
            </summary>
            <param name="name">Path of the SGAFile, e.g. "simulation\attrib\tuning\tuning_info.rbf".</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAContainer.GetDirectoryFromPath(System.String)">
            <summary>
            Returns the SGAStoredDirectory at the specified path or NULL if there's no such directory.
            </summary>
            <param name="path">e.g. simulation\attrib\tuning\</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAContainer.GetFileFromPath(System.String)">
            <summary>
            Returns the SGAStoredFile at the specified path or NULL if there's no such file.
            </summary>
            <param name="path">e.g. simulation\attrib\tuning\tuning.rbf</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAContainer.GetPath">
            <summary>
            Returns the path to this SGAContainer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.DawnOfWar2.SGA.SGAEntryPoint">
            <summary>
            Class representing an EntryPoint from a SGA file
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAEntryPoint.Root">
            <summary>
            Gets or sets the Root-SGAStoredDirectory of this EntryPoint.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAEntryPoint.Alias">
            <summary>
            Gets or sets the alias of this EntryPoint. Takes ASCII strings.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAEntryPoint.DirectoryOffset">
            <summary>
            Gets or sets the so called DirectoryOffset of this EntryPoint which I really don't know what it is. It's normally set to 0.
            </summary>
        </member>
        <member name="T:cope.DawnOfWar2.SGA.SGAFile">
            <summary>
            Class for READING SGAFiles. Writing is not yet implemented.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAFile.CreateRelationships">
            <summary>
            Helper-function to create the relationships between the EntryPoints, Directories and files.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAFile.ExtractFile(cope.DawnOfWar2.SGA.SGAStoredFile,System.IO.Stream)">
            <summary>
            Extracts the specified SGAStoredFile from this archive.
            </summary>
            <param name="sf">The SGAStoredFile which is to be extracted.</param>
            <param name="str">Archive stream where Position = 0 is the beginning of the Archive.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAFile.GetEntryPointAt(System.Int32)">
            <summary>
            Returns the EntryPoint at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAFile.GetIndexOfEntryPoint(cope.DawnOfWar2.SGA.SGAEntryPoint)">
            <summary>
            Returns the index of the specified EntryPoint.
            </summary>
            <param name="ep">EntryPoint to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAFile.RemoveEntryPoint(cope.DawnOfWar2.SGA.SGAEntryPoint)">
            <summary>
            Removes the specified EntryPoint from the SGA.
            </summary>
            <param name="ep">The EntryPoitn to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAFile.AddEntryPoint(cope.DawnOfWar2.SGA.SGAEntryPoint)">
            <summary>
            Adds the specified EntryPoint to the SGA.
            </summary>
            <param name="ep">The EntryPoint that is to be added.</param>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFile.EntryPointCount">
            <summary>
            Gets the number of EntryPoints in this SGAArchive.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFile.Item(System.Int32)">
            <summary>
            Returns the EntryPoint at the given index.
            </summary>
            <param name="index">Index of the EntryPoint.</param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAFile.Read(System.IO.Stream)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception"><c>CopeDoW2Exception</c>.</exception>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.Signature">
            <summary>
            Gets the signature of SGA-archives.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.Length">
            <summary>
            Gets the length of an SGAFileHeader in bytes.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.VersionUpper">
            <summary>
            Gets or sets the upper part of the version of this SGAArchive, 5 is used by DoW2.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.VersionLower">
            <summary>
            Gets or sets the upper part of the version of this SGAArchive, 0 is used by DoW2.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.ContentChecksum">
            <summary>
            Gets or sets the checksum for the content of the SGAArchive.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.DataHeaderChecksum">
            <summary>
            Gets or sets the checksum for the DataHeader of this SGAArchive.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.Name">
            <summary>
            Gets or sets the name of the SGA belonging to this header. Unicode string.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.DataHeaderSize">
            <summary>
            Gets or sets the size of the DataHeader of the SGA belonging to this header.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.DataOffset">
            <summary>
            Gets or sets the offset of the DataSection relative to the beginning of the file of the SGA belonging to this header.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.DataHeaderOffset">
            <summary>
            Gets or sets the offset of the DataHeader relative to the beginning of the file of the SGA belonging to this header.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.Platform">
            <summary>
            Gets or sets the platform of this SGAFileHeader. Use 1 for PC.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.Flags">
            <summary>
            Gets or sets the Flags for this header. They're normally set to 0 although I don't have any idea what they're there for.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAFileHeader.UnixTimeStamp">
            <summary>
            Gets or sets the TimeStamp of this header.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAFileHeader.GetFromStream(System.IO.BinaryReader)">
            <exception cref="T:cope.DawnOfWar2.CopeDoW2Exception">Unknown signature: ! Please ensure that the file you're trying to load is an SGA-File!</exception>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredDirectory.Length">
            <summary>
            Gets the length of a directory-entry in a SGA in bytes.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredDirectory.NameOffset">
            <summary>
            Gets or sets the Offset of the name of this SGAStoredDirectory.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredDirectory.Index">
            <summary>
            Gets or sets the index of this SGAStoredDirectory.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.Length">
            <summary>
            Gets the length of a file-entry in a SGA in bytes.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.SGA">
            <summary>
            Gets or sets the parent SGA of this SGAStoredFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.NameOffset">
            <summary>
            Gets or sets the Offset of the name of this SGAStoredFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.DataOffset">
            <summary>
            Gets or sets the Offset of the data of this SGAStoredFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.DataCompressedSize">
            <summary>
            Gets or sets the compressed size (in bytes) of the data held by this SGAStoredFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.DataUnCompressedSize">
            <summary>
            Gets or sets the compressed size (in bytes) of the data held by this SGAStoredFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.UnixTimeStamp">
            <summary>
            Gets or sets the timestamp for this SGAStoredFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.Flags">
            <summary>
            Gets or sets the flags of this SGAStoredFile. Normally 1 is used for compressed files.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.Index">
            <summary>
            Gets or sets the index of this SGAStoredFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.Name">
            <summary>
            Gets or sets the name of this RBFValue. Takes ASCII strings.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.SGA.SGAStoredFile.Parent">
            <summary>
            Gets or sets the parent of this RBFValue.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.SGA.SGAStoredFile.GetPath">
            <summary>
            Returns the path to this SGAStoredFile.
            </summary>
            <returns></returns>
        </member>
        <member name="P:cope.DawnOfWar2.Taggable.Tag">
            <summary>
            Gets or sets a tag containing additional information about the object.
            </summary>
        </member>
        <member name="T:cope.DawnOfWar2.UCSReader">
            <summary>
             Helper class for reading UCS files.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.UCSReader.Read(System.IO.Stream)">
            <summary>
             Reads UCS strings from a Stream and converts them to a Dictionary.
            </summary>
            <param name="stream"></param>
            <returns></returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.UCSReader.Read(System.IO.TextReader)">
            <summary>
             Reads UCS strings from a TextReader and converts them to a Dictionary.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DawnOfWar2.UCSReader.AddUCSStringFromText(System.String,System.Collections.Generic.IDictionary{System.UInt32,System.String})">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="T:cope.DawnOfWar2.UCSWriter">
            <summary>
             Helper class for writing Dictionaries as UCS files.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.UCSWriter.Write(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.UInt32,System.String}},System.IO.Stream)">
            <summary>
             Writes the specified collection of UCS strings to the specified Stream in UCS style.
            </summary>
            <param name="ucsStrings">The collection of strings to be written.</param>
            <param name="stream"></param>
             <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.UCSWriter.Write(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.UInt32,System.String}},System.IO.TextWriter)">
            <summary>
             Writes the specified collection of UCS strings to the specified TextWriter in UCS style.
            </summary>
            <param name="ucsStrings">The collection of strings to be written.</param>
            <param name="writer"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> is <c>null</c>.</exception>
        </member>
        <member name="T:cope.DawnOfWar2.UniFile">
            <summary>
            Class for files in general.
            </summary>
        </member>
        <member name="F:cope.DawnOfWar2.UniFile.m_filePath">
            <summary>
            Path to the file.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.#ctor(System.Byte[])">
            <summary>
            Constructs a new UniFile and reads it's data from the specified Byte[].
            </summary>
            <param name="data">Byte[] to read from.</param>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new UniFile and reads it's data from the specified file.
            </summary>
            <param name="filePath">Path of the file to read from.</param>
            <param name="createIfNotFound">If true, tries to create the specified file if it is not found.</param>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.#ctor(System.String,System.IO.FileAccess,System.IO.FileShare,System.Boolean)">
            <summary>
            Constructs a new UniFile and reads it's data from the specified file.
            </summary>
            <param name="filePath">Path of the file to read from.</param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="createIfNotFound">If true, tries to create the specified file if it is not found.</param>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.#ctor(System.IO.Stream)">
            <summary>
            Constructs a new UniFile using the provided stream.
            </summary>
            <param name="stream">The stream to read the data for the UniFile from.</param>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.#ctor">
            <summary>
            Constructs a new UniFile.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.WriteData">
            <summary>
            Writes data to the current stream.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.WriteDataTo(System.String)">
            <summary>
            Writes the data of this File to a location of your choice. May throw exceptions, does not alter the Stream-property.
            </summary>
            <param name="path">The path to write the file to, e.g. "C:/my_file.txt".</param>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.Write(System.IO.Stream)">
            <summary>
            Writes the data to the specified stream. It will NOT close the stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.ReadData">
            <summary>
            Reads the data from the current stream.
            </summary>
            <exception cref="T:cope.CopeException">Error while trying to read data in UniFile! See inner exception.</exception>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.Read(System.IO.Stream)">
            <summary>
            Reads the data from the specified stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.ConsumeStream">
            <summary>
            Reads the entire stream and returns a byte-array with the Stream's content.
            </summary>
            <returns></returns>
        </member>
        <member name="P:cope.DawnOfWar2.UniFile.Stream">
            <summary>
            Gets or sets the stream of this UniFile.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.UniFile.FileName">
            <summary>
            Gets or sets the filename with extension.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.UniFile.FileExtension">
            <summary>
            Gets or sets the extension of the file.
            </summary>
        </member>
        <member name="P:cope.DawnOfWar2.UniFile.FilePath">
            <summary>
            Gets or sets the path to the file.
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.Delete">
            <summary>
            </summary>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.Copy(System.String)">
            <summary>
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:cope.DawnOfWar2.UniFile.Move(System.String)">
            <summary>
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:cope.IO.StreamExt.IStreamExtBinaryCompatible">
            <summary>
            </summary>
        </member>
        <member name="M:cope.IO.StreamExt.IStreamExtBinaryCompatible.WriteToStream(System.IO.Stream)">
            <summary>
            Write the Data of this instance into a binary Stream.
            </summary>
            <param name="str">The Stream to write into.</param>
        </member>
        <member name="M:cope.IO.StreamExt.IStreamExtBinaryCompatible.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Write the Data of this instance into a binary Stream using a specified BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter that is to be used.</param>
        </member>
        <member name="M:cope.IO.StreamExt.IStreamExtBinaryCompatible.GetFromStream(System.IO.Stream)">
            <summary>
            Get the Data for this instance from a binary Stream.
            </summary>
            <param name="str">The Stream to get the Data from.</param>
            <returns>Returns the object read.</returns>
        </member>
        <member name="M:cope.IO.StreamExt.IStreamExtBinaryCompatible.GetFromStream(System.IO.BinaryReader)">
            <summary>
            Get the Data for this instance from a binary Stream using a specified BinaryReader.
            </summary>
            <param name="bw">The BinaryWriter that is to be used.</param>
        </member>
        <member name="T:cope.IO.StreamExt.IStreamExtTextCompatible">
            <summary>
            Interface for writing/getting data from a textstream. Uses UTF8 encoding.
            </summary>
        </member>
        <member name="M:cope.IO.StreamExt.IStreamExtTextCompatible.WriteToTextStream(System.IO.Stream)">
            <summary>
            Write the Data of this instance into a text Stream.
            </summary>
            <param name="str">The Stream to write into.</param>
        </member>
        <member name="M:cope.IO.StreamExt.IStreamExtTextCompatible.WriteToTextStream(System.IO.TextWriter)">
            <summary>
            Write the Data of this instance into a text Stream using a specified TextWriter.
            </summary>
            <param name="tw">TextWriter that is to be used.</param>
        </member>
        <member name="M:cope.IO.StreamExt.IStreamExtTextCompatible.GetFromTextStream(System.IO.Stream)">
            <summary>
            Get the Data for this instance from a text Stream.
            </summary>
            <param name="str">The Stream to get the Data from.</param>
            <returns>Returns the object read.</returns>
        </member>
        <member name="M:cope.IO.StreamExt.IStreamExtTextCompatible.GetFromTextStream(System.IO.TextReader)">
            <summary>
            Get the Data for this instance from a text Stream using a specified TextReader.
            </summary>
            <param name="tr">TextReader that is to be used.</param>
        </member>
    </members>
</doc>
