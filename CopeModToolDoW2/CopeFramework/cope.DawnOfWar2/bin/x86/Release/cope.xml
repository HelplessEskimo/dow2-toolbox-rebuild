<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cope</name>
    </assembly>
    <members>
        <member name="T:cope.ArgParser">
            <summary>
            Class used for parsing arguments to a command line application.
            </summary>
        </member>
        <member name="M:cope.ArgParser.ParseArguments(System.String[])">
            <summary>
            Parses a set of arguments as received as a parameter to the Main method of command line programs.
            This function will do very basic parsing, so you get a table representing the different arguments and their values as a string.
            An empty string implies that the argument is present but does not have a value.
            Arguments start with '-', e.g. "-x clap -t -o"
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:cope.ArrayHelper.Repeat``1(``0,System.Int32)">
            <summary>
            Creates an array by repeating the given value a specified number of times.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="T:cope.CustomHeap`1">
            <summary>
            Implements a heap with a custom IComparer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:cope.DelegateHeap`1">
            <summary>
            Implements a heap with a delegate as a comparer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:cope.DelegateHeap`1.#ctor(System.Func{`0,`0,System.Int32},System.Int32)">
            <summary>
            Constructs a new heap given a delegate implementing the comparison of the items and the initial capacity of the heap.
            </summary>
            <param name="comparer"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:cope.DelegateHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Int32})">
            <summary>
            Constructs a new heap from a set of items and a delegate implementing the comparison of the items.
            </summary>
            <param name="t"></param>
            <param name="comparer">Function which implements the comparison of two items of type T.</param>
        </member>
        <member name="M:cope.DelegateHeap`1.#ctor(cope.DelegateHeap{`0},System.Func{`0,`0,System.Int32})">
            <summary>
            Copy constructor with the ability to override the used comparison.
            </summary>
            <param name="heap"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:cope.DelegateHeap`1.#ctor(cope.DelegateHeap{`0})">
            <summary>
            Copy constructor.
            </summary>
            <param name="heap"></param>
        </member>
        <member name="P:cope.DelegateHeap`1.Items">
            <summary>
            Gets all items in the heap in an unordered fashion.
            </summary>
        </member>
        <member name="P:cope.DelegateHeap`1.Count">
            <summary>
            Gets the number of items in the heap.
            </summary>
        </member>
        <member name="M:cope.DelegateHeap`1.GetHead">
            <summary>
            Returns the head of the heap. If the heap is empty, it will throw an exception.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception">Heap is empty!</exception>
        </member>
        <member name="M:cope.DelegateHeap`1.RemoveHead">
            <summary>
            Removes the head of the heap.
            </summary>
        </member>
        <member name="M:cope.DelegateHeap`1.Insert(`0)">
            <summary>
            Inserts a value into the heap.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:cope.DelegateHeap`1.Update(`0)">
            <summary>
            Updates the heap by updating one of its members.
            This of course only works for reference types as value types are immutable by default.
            Returns whether or not the specified value was part of the heap.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:cope.DelegateHeap`1.Update(System.Func{`0,System.Boolean},System.Action{`0})">
            <summary>
            Takes a predicate and an action and calls the update-action on the first item in the heap that satisfies the prediate.
            It will then update the heap accordingly. Returns whether or not any item satisfied the predicate.
            </summary>
            <param name="predicate"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="P:cope.EitherLeft`2.Right">
            <exception cref="T:System.InvalidOperationException">This is an Either-Left instance!</exception>
        </member>
        <member name="P:cope.EitherRight`2.Left">
            <exception cref="T:System.InvalidOperationException">This is an Either-Right instance!</exception>
        </member>
        <member name="M:cope.Extensions.FloatExt.ToInvariantString(System.Single)">
            <summary>
            Converts this float to its string representation using the invariant culture.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Extensions.IListExt">
            <summary>
            Static class offering extensions for ILists, indexed lists.
            </summary>
        </member>
        <member name="M:cope.Extensions.IListExt.Slice``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Gets a slice of an indexed list (IList) given a start index and an end index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexedList"></param>
            <param name="start">The start index of the slice.</param>
            <param name="end">The end index of the slice.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.IListExt.Slice``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets a slice of an indexed list (IList) given a start index, running all to the end of the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexedList"></param>
            <param name="start">The start index of the slice.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.IListExt.SliceLength``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Gets a slice of an indexed list (IList) given a start index and a length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexedList"></param>
            <param name="start">The start index of the slice.</param>
            <param name="length">The length of the slice.</param>
            <returns></returns>
        </member>
        <member name="T:cope.Extensions.StringArrayExt">
            <summary>
            Static class offering some useful extensions for string arrays.
            </summary>
        </member>
        <member name="M:cope.Extensions.TextWriterExt.WriteLines(System.IO.TextWriter,System.String[])">
            <summary>
            Writes an array of lines to this instance of TextWriter.
            </summary>
            <param name="tw"></param>
            <param name="lines"></param>
        </member>
        <member name="F:cope.Extensions.BinaryReaderExt.BYTE_BUFFER_SIZE">
            <summary>
            Buffer size for ReadUntil method.
            </summary>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.IsAtEnd(System.IO.BinaryReader)">
            <summary>
            Returns whether or not this BinaryReader has reached the end of the stream.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.ReadUntil(System.IO.BinaryReader,System.Byte)">
            <summary>
            Reads bytes until the specified value is found.
            </summary>
            <param name="reader"></param>
            <param name="value">The value to stop at. The value itself is also read.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.ReadCString(System.IO.BinaryReader)">
            <summary>
            Reads a zero terminated Ascii-string (including terminating the zero) from this BinaryReader.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.ReadCString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a zero terminated Ascii-string (including the terminating zero) from this BinaryReader. Also takes a length parameter to control the maximum length of the string
            and ensure that a given amount of bytes are read.
            </summary>
            <param name="reader"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.ReadAsciiString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an Ascii string of the specified length from this BinaryReader.
            </summary>
            <param name="reader"></param>
            <param name="lengthInBytes">Number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.ReadUnicodeString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an Unicode string of the specified length (in bytes) from this BinaryReader.
            </summary>
            <param name="reader"></param>
            <param name="lengthInBytes">Number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.ReadInt32Array(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an array of the specified length of Integers from this BinaryReader.
            </summary>
            <param name="reader"></param>
            <param name="count">Number of elements in the array.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.ReadUInt32Array(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an array of the specified length of unsigned Integers from this BinaryReader.
            </summary>
            <param name="reader"></param>
            <param name="count">Number of elements in the array.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.ReadFloatArray(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an array of the specified length of Floats from this BinaryReader.
            </summary>
            <param name="reader"></param>
            <param name="count">Number of elements in the array.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BinaryReaderExt.ReadBoolArray(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an array of the specified length of 1-byte booleans from this BinaryReader.
            </summary>
            <param name="reader"></param>
            <param name="count">Number of elements in the array.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BitArrayExt.ToBinaryString(System.Collections.BitArray)">
            <summary>
            Converts this instance of BitArray to its representation as a binary string.
            The lowest index-bit is the left-most in the string.
            </summary>
            <param name="ba"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BitArrayExt.AllZero(System.Collections.BitArray)">
            <summary>
            Returns whether or not all of the bits from this instance of BitArray are all set to 0.
            </summary>
            <param name="ba"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BitArrayExt.AllOne(System.Collections.BitArray)">
            <summary>
            Returns whether or not all of the bits from this instance of BitArray are all set to 1.
            </summary>
            <param name="ba"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.BoolExt.ToBinaryString(System.Boolean[])">
            <summary>
            Converts this bool array to a binary string.
            </summary>
            <param name="ba"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Extensions.DateTimeExt">
            <summary>
            Extension for DateTime.
            </summary>
        </member>
        <member name="M:cope.Extensions.DateTimeExt.GetFromUnixTimeStamp(System.UInt32)">
            <summary>
            Converts the specified unixTimeStamp to a DateTime object.
            </summary>
            <param name="unixTimeStamp">UnixTimeStamp to get the time from.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.DateTimeExt.GetUnixTimeStamp(System.DateTime)">
            <summary>
            Returns the seconds passed since 1.1.1970.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.DateTimeExt.ToProperString(System.DateTime)">
            <summary>
            Returns a string of format YYYY-MM-DD-hh-mm-ss.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.DateTimeExt.ToProperString(System.DateTime,System.Char)">
            <summary>
            Returns a string of format YYYY-MM-DD-hh-mm-ss using a custom separator.
            </summary>
            <param name="dt"></param>
            <param name="separator">Separator character to be inserted between the time-values.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ICollectionExt.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of items to this instancen of ICollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="icoll"></param>
            <param name="items"></param>
        </member>
        <member name="M:cope.Extensions.ICollectionExt.AddMultiple``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds a range of items to this instancen of ICollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="icoll"></param>
            <param name="items"></param>
        </member>
        <member name="M:cope.Extensions.ICollectionExt.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all elements matched by the selector from this ICollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="icoll"></param>
            <param name="selector"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.ICollectionExt.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Removes all elements matched by the selector from this ICollection. The selector also
            gets the index of the current element as a parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="icoll"></param>
            <param name="selector"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Invokes the specified action on each element of the IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Invokes the specified action on each element of the IEnumerable. The action also
            gets the elements index within the IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Invokes the specified action on each element of the IEnumerable. The iteration
            ends as soon as the action returns 'false'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Invokes the specified action on each element of the IEnumerable. The action also
            gets the index of the element in the IEnumerable as a parameter. The iteration
            ends as soon as the action returns 'false'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="action"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index of the first item satisfying the given predicate or -1 if there is no such item in the IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="predicate">The predicate to check the items against.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the index of the first occurrence of a specified object in the IEnumerable.
            Equality is checked using the default equality comparer.
            Should the IEnumerable not contain the specified object, this method returns -1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},``0)">
            <summary>
            Returns the index of the first occurrence of a specified object in the IEnumerable.
            Equality is checked using the specified function.
            Should the IEnumerable not contain the specified object, this method returns -1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="equalityComparer"></param>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="equalityComparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the index of the last occurrence of a specified object in the IEnumerable.
            Equality is checked using the default equality comparer.
            Should the IEnumerable not contain the specified object, this method returns -1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},``0)">
            <summary>
            Returns the index of the last occurrence of a specified object in the IEnumerable.
            Equality is checked using the specified function.
            Should the IEnumerable not contain the specified object, this method returns -1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="equalityComparer"></param>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="equalityComparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.LastIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index of the last element in an IEnumerable that satisfies a certain predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="predicate">The predicate to check items against.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.IEnumerableExt.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Collections.Generic.ICollection{``0}@,System.Collections.Generic.ICollection{``0}@)">
            <summary>
            Splits this IEnumeration into two halfs using the selector function.
            Items for which the selector function returns true are added to the first ICollection,
            all the others are added to the second ICollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum"></param>
            <param name="selector">This function determines which collection an item belongs to.</param>
            <param name="t1">All items for which the selector returns true are added to this collection.</param>
            <param name="t2">All items for which the selector returns false are added to this collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.ListBoxExt.AddRange``1(System.Windows.Forms.ListBox.ObjectCollection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds each element from the specified IEnumerable to the ObjectCollection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll"></param>
            <param name="range"></param>
        </member>
        <member name="M:cope.Extensions.ProcessExt.StoreProcessInfo(System.Diagnostics.Process,System.Exception)">
            <summary>
            Collects information about the process and stores it in the Data-object of the selected exception.
            </summary>
            <param name="process"></param>
            <param name="exception"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.ProcessExt.GetProcessInfo(System.Diagnostics.Process,System.Boolean,System.Boolean)">
            <summary>
            Gathers information about the process and returns the information as a string.
            </summary>
            <param name="process"></param>
            <param name="moduleInfo">Set to true to dump information about the modules in use.</param>
            <param name="threadInfo">Set to true to dump information about the threads.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.RandomExt.NextBool(System.Random)">
            <summary>
            Returns a random boolean value.
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.RandomExt.NextBool(System.Random,System.Double)">
            <summary>
            Returns a random boolean value with a specified chance of it being 'true'.
            </summary>
            <param name="rng"></param>
            <param name="chance">The chance of the boolean value to be 'true'.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.RandomExt.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Returns a double-value within the specified interval. The upper limit is exclusive.
            </summary>
            <param name="rng"></param>
            <param name="lowerLimit">The inclusive lower limit of the interval.</param>
            <param name="upperLimit">The exclusive upper limit of the interval.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.RandomExt.NextNormal(System.Random)">
            <summary>
            Returns a random value which follows a standard normal distribution.
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.RandomExt.NextNormal(System.Random,System.Double,System.Double)">
            <summary>
            Returns a normally distributed value in the specified interval.
            </summary>
            <param name="rng"></param>
            <param name="from">The lowest value to return.</param>
            <param name="to">The highest value to return.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.RandomExt.NextInverseBell(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random value which is distributed in the form an inverse bell function.
            This means that extreme values are more likely to occur than values close to the median.
            </summary>
            <param name="rng"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.RandomExt.NextQuadratic(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random value which is distributed in the form a quadratic function.
            This means that values closer to the 'to' limit are more likely to occur than values close to
            the 'from' limit.
            </summary>
            <param name="rng"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Equals(System.Text.StringBuilder,System.String)">
            <summary>
            Determines whether the value of this StringBuilder and the value of a specified String are the same.
            </summary>
            <param name="sb">StringBuilder to operate on.</param>
            <param name="str">String to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Clear(System.Text.StringBuilder)">
            <summary>
            Clears the StringBuilder.
            </summary>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.ToCharArray(System.Text.StringBuilder)">
            <summary>
            Returns a char array containing the characters of the value hold by this instance of StringBuilder.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.ToLower(System.Text.StringBuilder)">
            <summary>
            Makes the value hold by this instance of StringBuilder lower case.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.ToUpper(System.Text.StringBuilder)">
            <summary>
            Makes the value hold by this instance of StringBuilder upper case.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.InvertCase(System.Text.StringBuilder)">
            <summary>
            Inverts the case of the value hold by this instance of StringBuilder.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Object)">
            <summary>
            Sets the string of the StringBuilder to the string representation of value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.String)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Char[])">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Int32)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Int64)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Int16)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Byte)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.UInt32)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.UInt64)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.UInt16)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.SByte)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Double)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Decimal)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Single)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
            <param name="repeatCount">Defines how many times the value shall be appended.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Char[],System.Int32,System.Int32)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
            <param name="startIndex">The starting position in value (zero-based.)</param>
            <param name="charCount">Number of characters to append</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.String,System.Int32,System.Int32)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
            <param name="startIndex">The starting position in value (zero-based).</param>
            <param name="charCount">Number of characters to append.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
            <param name="startIndex">The starting position in value (zero-based).</param>
            <param name="charCount">Number of characters to append.</param>
            <param name="asciiEncoding">Set to true to use ASCII enconding instead of Unicode.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Byte[],System.Int32)">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
            <param name="charCount">Number of characters to append</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Sets the string of the StringBuilder to the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to set to.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SetString(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Sets the string of the StringBuilder to the specified format string.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">FormatString, e.g. "Floating point number: {0:f2}".</param>
            <param name="args">Objects to format, e.g. a,b,c.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Append(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts the byte[] to a char[] and append these.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Byte[] to append.</param>
            <param name="asciiEncoding">Set to true to use ASCII enconding instead of Unicode.</param>
            <param name="index">Index of the first byte in the array to append (zero-based).</param>
            <param name="length">Number of bytes to append.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Append(System.Text.StringBuilder,System.Byte[],System.Boolean)">
            <summary>
            Converts the byte[] to a char[] and append these.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Byte[] to append.</param>
            <param name="asciiEncoding">Set to true to use ASCII enconding instead of Unicode.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Append(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Appends the value to the StringBuilder.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="value">Value to append.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Append(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Appends the specified string a number of times.
            </summary>
            <param name="str"></param>
            <param name="s">String to append.</param>
            <param name="times">Times to append.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.AppendLine(System.Text.StringBuilder,System.Object[])">
            <summary>
            Appends all arguments to the StringBuilder and adds a line break.
            This method has been made to avoid constructs such as str.AppendLine("string" + value)
            which effectively defeat the whole purpose of StringBuilders.
            </summary>
            <param name="str"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringAfterLast(System.Text.StringBuilder,System.Char,System.Boolean)">
            <summary>
            Returns the string after the last occurence of searchChar or the string itself if searchChar couldn't be found. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringAfterLast(System.Text.StringBuilder,System.Char[],System.Boolean)">
            <summary>
            Returns the string after the last occurence of any of the searchChars or the string itself if no searchChar could be found. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchChars">Chars to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringAfterLast(System.Text.StringBuilder,cope.CharType,System.Boolean)">
            <summary>
            Returns the string after the last occurence of searchChar or the string itself if searchChar couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringAfterFirst(System.Text.StringBuilder,System.Char,System.Boolean)">
            <summary>
            Returns the string after the first occurence of searchChar or the string itself if searchChar couldn't be found. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringAfterFirst(System.Text.StringBuilder,System.Char[],System.Boolean)">
            <summary>
            Returns the string after the first occurence of any of the searchChars or the string itself if no searchChar could be found. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchChars">Chars to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringAfterFirst(System.Text.StringBuilder,cope.CharType,System.Boolean)">
            <summary>
            Returns the string after the first occurence of searchChar or the string itself if searchChar couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringBeforeLast(System.Text.StringBuilder,System.Char,System.Boolean)">
            <summary>
            Returns the string before the last occurence of searchChar or the string itself if searchChar couldn't be found. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringBeforeLast(System.Text.StringBuilder,System.Char[],System.Boolean)">
            <summary>
            Returns the string before the last occurence of any of the searchChars or the string itself if no searchChar could be found. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchChars">Chars to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringBeforeLast(System.Text.StringBuilder,cope.CharType,System.Boolean)">
            <summary>
            Returns the string before the last occurence of searchChar or the string itself if searchChar couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringBeforeFirst(System.Text.StringBuilder,System.Char,System.Boolean)">
            <summary>
            Returns the string before the first occurence of searchChar or the string itself if searchChar couldn't be found. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringBeforeFirst(System.Text.StringBuilder,System.Char[],System.Boolean)">
            <summary>
            Returns the string before the first occurence of any of the searchChars or the string itself if no searchChar could be found. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchChars">Chars to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.SubstringBeforeFirst(System.Text.StringBuilder,cope.CharType,System.Boolean)">
            <summary>
            Returns the string before the first occurence of searchChar or the string itself if searchChar couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.IndexOf(System.Text.StringBuilder,System.Char)">
            <summary>
            Returns the zero-based index of the first occurence of the specified char. Returns -1 if the char couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="c">Char to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.IndexOf(System.Text.StringBuilder,cope.CharType)">
            <summary>
            Returns the zero-based index of the first occurence of a char of CharType. Returns -1 if CharType couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.IndexOf(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Returns the zero-based position of the first instance of searchString. Returns -1 if searchString couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchString">String to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.IndexOf(System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns the zero-based position of the first instance of searchString. Returns -1 if searchString couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchString">StringBuilder to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.LastIndexOf(System.Text.StringBuilder,System.Char)">
            <summary>
            Returns the zero-based index of the last occurence of the specified char. Returns -1 if the char couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="c">Char to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.LastIndexOf(System.Text.StringBuilder,cope.CharType)">
            <summary>
            Returns the zero-based index of the last occurence of a char of CharType. Returns -1 if CharType  couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.LastIndexOf(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Returns the zero-based position of the last instance of searchString. Returns -1 if searchString couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchString">StringBuilder to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.LastIndexOf(System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns the zero-based position of the last instance of searchString. Returns -1 if searchString couldn't be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchString">StringBuilder to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.IndicesOfAll(System.Text.StringBuilder,System.Char)">
            <summary>
            Returns an array containing each zero-based position of the searchChar in this instance. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.IndicesOfAll(System.Text.StringBuilder,cope.CharType)">
            <summary>
            Returns an array containing each zero-based position of a char of CharType  in this instance.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.IndexOfAny(System.Text.StringBuilder,System.Char[])">
            <summary>
            Returns the zero-based index of the first occurence of any of the specified chars. Returns -1 if nothing could be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="chars">Chars to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.IndexOfAny(System.Text.StringBuilder,cope.CharType[])">
            <summary>
            Returns the zero-based index of the first occurence of a char of any of the specified CharTypes. Returns -1 if nothing could be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charTypes">CharTypes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.LastIndexOfAny(System.Text.StringBuilder,System.Char[])">
            <summary>
            Returns the zero-based index of the last occurence of any of the specified chars. Returns -1 if nothing could be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="chars">Chars to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.LastIndexOfAny(System.Text.StringBuilder,cope.CharType[])">
            <summary>
            Returns the zero-based index of the last occurence of a char of any of the specified CharTypes. Returns -1 if nothing could be found.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charTypes">CharTypes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.EndsWith(System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns true if this instance ends with the specified value. Returns false if the value to check against is longer than the string to check itself.
            </summary>
            <param name="str"></param>
            <param name="end">StringBuilder which the end is compared to.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.EndsWith(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Returns true if this instance ends with the specified value. Returns false if the value to check against is longer than the string to check itself.
            </summary>
            <param name="str"></param>
            <param name="end">String which the end is compared to.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.EndsWith(System.Text.StringBuilder,System.Char)">
            <summary>
            Returns true if this instance ends with the specified value. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="end">Character which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.EndsWith(System.Text.StringBuilder,cope.CharType)">
            <summary>
            Returns true if this instance ends with the specified value. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charType">CharacterType which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.EndsWithAny(System.Text.StringBuilder,System.Char[])">
            <summary>
            Returns true if this instance ends with any of the specified chars. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="ends">Characters which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.EndsWithAny(System.Text.StringBuilder,cope.CharType[])">
            <summary>
            Returns true if this instance ends with a char of any of the specified CharTypes. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charTypes">CharTypes which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.StartsWith(System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns true if this instance begins with the specified value. Returns false if the value to check against is longer than the string to check itself.
            </summary>
            <param name="str"></param>
            <param name="beginning">StringBuilder which the beginning is compared to.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.StartsWith(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Returns true if this instance begins with the specified value. Returns false if the value to check against is longer than the string to check itself.
            </summary>
            <param name="str"></param>
            <param name="beginning">String which the beginning is compared to.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.StartsWith(System.Text.StringBuilder,System.Char)">
            <summary>
            Returns true if this instance begins with the specified value. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="beginning">Character which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.StartsWith(System.Text.StringBuilder,cope.CharType)">
            <summary>
            Returns true if this instance begins with the specified value. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charType">CharacterType which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.StartsWithAny(System.Text.StringBuilder,System.Char[])">
            <summary>
            Returns true if this instance begins with any of the specified chars. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="beginnings">Characters which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.StartsWithAny(System.Text.StringBuilder,cope.CharType[])">
            <summary>
            Returns true if this instance begins with a char of any of the specified CharTypes. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charTypes">CharTypes which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Contains(System.Text.StringBuilder,System.Char)">
            <summary>
            Returns true if the string contains the specified character.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="c">Value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Contains(System.Text.StringBuilder,cope.CharType)">
            <summary>
            Returns true if the string contains a character of the specified CharType.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">Value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Contains(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Returns true if this instance contains the specified value.
            </summary>
            <param name="str"></param>
            <param name="searchString">Value to search for.</param>
            <param name="ignoreCase">Set to true to care about case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Contains(System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns true if the string contains the string in the specified StringBuilder.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchString">Value to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.ContainsAny(System.Text.StringBuilder,System.Char[])">
            <summary>
            Returns true if the string contains any of the specified characters.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="c">Chars to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.ContainsAny(System.Text.StringBuilder,cope.CharType[])">
            <summary>
            Returns true if the string contains a character of any of the specified CharTypes.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="ct">CharTypes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Count(System.Text.StringBuilder,System.Char)">
            <summary>
            Returns the number of occurences of searchChar. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on</param>
            <param name="searchChar">Char to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Count(System.Text.StringBuilder,System.Char[])">
            <summary>
            Returns the number of occurences of any of the searchChars. Case-sensitive.
            </summary>
            <param name="str">StringBuilder to operate on</param>
            <param name="searchChars">Chars to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Count(System.Text.StringBuilder,cope.CharType)">
            <summary>
            Returns the number of occurences of chars of CharType.
            </summary>
            <param name="str">StringBuilder to operate on</param>
            <param name="charType">CharType  to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Count(System.Text.StringBuilder,cope.CharType[])">
            <summary>
            Returns the number of occurences of chars of any of the given CharTypes.
            </summary>
            <param name="str">StringBuilder to operate on</param>
            <param name="charTypes">CharTypes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Count(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Returns the number of occurences of searchString.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchString">String to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Count(System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns the number of occurences of searchString.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="searchString">StringBuilder to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.ReplaceChar(System.Text.StringBuilder,System.Char,System.Char)">
            <summary>
            Replaces all occurences of oldChar with newChar.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="oldChar">The char to replace.</param>
            <param name="newChar">The new char.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.ReplaceChar(System.Text.StringBuilder,System.Char,System.Char[])">
            <summary>
            Replaces all occurences of oldChars with newChar.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="oldChars">The chars to replace.</param>
            <param name="newChar">The new char.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.ReplaceChar(System.Text.StringBuilder,System.Char[],System.Char[])">
            <summary>
            Replaces all occurences of oldChars with newChars (so if oldChars[0] is found it's replaced with newChars[0]).
            If oldChars is bigger than newChars for every [i] > newChars.Length newChars[lenght-1] is used.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="oldChars">The chars to replace.</param>
            <param name="newChars">The new chars.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.ReplaceChar(System.Text.StringBuilder,cope.CharType,System.Char)">
            <summary>
            Replaces all occurences of Chars of a special CharType  with newChar.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType  to replace.</param>
            <param name="newChar">Char to insert.</param>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.RemoveAll(System.Text.StringBuilder,System.Char)">
            <summary>
            Removes all chars with the specified value c.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="c">Char to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.RemoveAll(System.Text.StringBuilder,System.Char[])">
            <summary>
            Removes all chars with any of the specified values c
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="chars">Chars to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.RemoveAll(System.Text.StringBuilder,cope.CharType)">
            <summary>
            Removes all chars of the specified CharType.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType  to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.RemoveAll(System.Text.StringBuilder,cope.CharType[])">
            <summary>
            Removes all chars of the specified CharTypes.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charTypes">CharTypes to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.RemoveAllBut(System.Text.StringBuilder,System.Char)">
            <summary>
            Removes everything but the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="c">Char to keep.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.RemoveAllBut(System.Text.StringBuilder,System.Char[])">
            <summary>
            Removes everything but the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="chars">Chars to keep.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.RemoveAllBut(System.Text.StringBuilder,cope.CharType)">
            <summary>
            Removes everything but the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charType">CharType  to keep.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.RemoveAllBut(System.Text.StringBuilder,cope.CharType[])">
            <summary>
            Removes everything but the specified value.
            </summary>
            <param name="str">StringBuilder to operate on.</param>
            <param name="charTypes">CharTypes to keep.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Remove(System.Text.StringBuilder,System.Int32)">
            <summary>
            Removes all characters starting at 'startIndex'.
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.RemoveLast(System.Text.StringBuilder,System.Int32)">
            <summary>
            Removes the last 'count' characters.
            </summary>
            <param name="str"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringBuilderExt.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverses a StringBuilder
            </summary>
            <param name="str">StringBuilder to operate on</param>
        </member>
        <member name="M:cope.Extensions.TextReaderExt.ReadWhitespaces(System.IO.TextReader)">
            <summary>
            Reads all the leading whitespaces and returns true if there's anything left at all.
            </summary>
            <param name="tr"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.TextReaderExt.ReadUntil(System.IO.TextReader,System.Char,System.Boolean)">
            <summary>
            Reads until a specified character and returns the substring before the occurence of the character.
            </summary>
            <param name="tr"></param>
            <param name="c"></param>
            <param name="including"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.TextReaderExt.ReadUntil(System.IO.TextReader,System.String@,System.Char[])">
            <summary>
            Reads until the first occurence of any character specified in 'limits'. Returns the character it hit on.
            </summary>
            <param name="tr"></param>
            <param name="read">The string read until it hit the delimiter.</param>
            <param name="limits"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.TextReaderExt.ReadUntil(System.IO.TextReader,System.Boolean,System.String@,System.Char[])">
            <summary>
            Reads until the first occurence of any character specified in 'limits'. Returns the character it hit on.
            </summary>
            <param name="tr"></param>
            <param name="including"></param>
            <param name="read">The string read until it hit the delimiter.</param>
            <param name="limits"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.TextReaderExt.ReadLiteral(System.IO.TextReader)">
            <summary>
            Reads and returns a literal from the specified TextReader.
            </summary>
            <param name="tr"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.TextReaderExt.IsAtEnd(System.IO.TextReader)">
            <summary>
            Returns true when the StreamReader has reached the end of the file.
            </summary>
            <param name="tr"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Extensions.XmlNodeExt">
            <summary>
            Static helper class to read primitive values from XmlNodes.
            </summary>
        </member>
        <member name="M:cope.Extensions.XmlNodeExt.ReadDouble(System.Xml.XmlNode,System.String)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:cope.Extensions.XmlNodeExt.ReadInt(System.Xml.XmlNode,System.String)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:cope.Extensions.XmlNodeExt.ReadString(System.Xml.XmlNode,System.String)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:cope.Extensions.XmlNodeExt.ReadBool(System.Xml.XmlNode,System.String)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:cope.Extensions.XmlNodeExt.ReadEnum``1(System.Xml.XmlNode,System.String)">
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:cope.Extensions.ByteExt.ReverseBytes(System.Byte[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Reverses the bytes in a byte array.
            </summary>
            <param name="b1"></param>
            <param name="returnCopy">Set to true to receive a copy of the array and leave the original array unmodified.</param>
            <param name="index">Index of the first element in the array to reverse.</param>
            <param name="length">Number of bytes to reverse.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ByteExt.ReverseBytes(System.Byte[],System.Boolean)">
            <summary>
            Reverses the bytes in a byte array.
            </summary>
            <param name="b1"></param>
            <param name="returnCopy">Set to true to receive a copy of the array and leave the original array unmodified.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ByteExt.ReverseBytes(System.Byte[])">
            <summary>
            Reverses the bytes in a byte array.
            </summary>
            <param name="b1"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ByteExt.ToHexString(System.Byte[],System.Boolean)">
            <summary>
            Converts this byte array to a string containing its hexadecimal representation.
            </summary>
            <param name="bytes"></param>
            <param name="addSpaces">Set to false to disable spaces between the single bytes.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ComparableExt.ContainsComparable``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns true if this array contains anything identical to o2.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ComparableExt.IsComparable``1(``0[],``0[])">
            <summary>
            Returns whether the two arrays have equal contents by using the CompareTo method.
            </summary>
            <param name="ic1"></param>
            <param name="ic2"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ComparableExt.RemoveComparable``1(``0[],``0)">
            <summary>
            Removes all occurences of o2 in this array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ComparableExt.CountComparable``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Counts how often o2 appears in this IEnumerable using the CompareTo method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ComparableExt.IndexOfComparable``1(``0[],``0)">
            <summary>
            Returns the index of the first occurence of anything comparably-equal to t2 or -1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Extensions.ArrayExt">
            <summary>
            Static class offering various extension methods for every array type.
            </summary>
        </member>
        <member name="M:cope.Extensions.ArrayExt.CountEqual``1(``0[],``0)">
            <summary>
            Counts how often o2 appears in this array using the Equals method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.IsEqual``1(``0[],``0[])">
            <summary>
            Returns whether the contents of the two arrays are equal by using the Equals method.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.GetValues``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns 'length' Ts from a T array starting at the specified index.
            </summary>
            <param name="array"></param>
            <param name="index">Index of the first value to get.</param>
            <param name="length">Number of values to get.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.For``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns the entries from [from] to [to].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.Exception">The 'from' parameter must be smaller than the 'to' parameter!</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Append``1(``0[],``0[])">
            <summary>
            Appends the specified T[] to this T[].
            </summary>
            <param name="t1">T[] 1</param>
            <param name="t2">T[] 2</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Append``1(``0[],``0)">
            <summary>
            Appends the specified T to this T[].
            </summary>
            <param name="t1"></param>
            <param name="appendix">T to append</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Prepend``1(``0[],``0[])">
            <summary>
            Prepends the specified T[] to this T[].
            </summary>
            <param name="t1">T[] 1</param>
            <param name="t2">T[] 2</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Prepend``1(``0[],``0)">
            <summary>
            Prepends the specified T to this T[].
            </summary>
            <param name="t1"></param>
            <param name="prependix">T to prepend.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.RemoveEqual``1(``0[],``0)">
            <summary>
            Removes all occurences of o2 in this array using the Equals method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Clear``1(``0[],System.Int32)">
            <summary>
            Clears the array entries starting at 'index';
            </summary>
            <param name="b1"></param>
            <param name="index">Index to start clearing.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Clear``1(``0[],System.Int32,System.Int32)">
            <summary>
            Clears 'numToClear' array entries starting at 'index';
            </summary>
            <param name="b1"></param>
            <param name="index">Index to start clearing.</param>
            <param name="numToClear">Number of entries to clear.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.SetValues``1(``0[],``0[],System.Int32)">
            <summary>
            Sets 'numToCopy' Ts from this instance to Ts from 'source'. Works like memset.
            </summary>
            <param name="b1"></param>
            <param name="source">Ts to write.</param>
            <param name="numToCopy">Number of Ts to copy.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.SetValues``1(``0[],System.Int32,``0[])">
            <summary>
            Sets the Ts starting at 'destIndex' to the Ts from 'source'.
            </summary>
            <param name="b1"></param>
            <param name="destIndex">Zero-based index to start writing in the destination array.</param>
            <param name="source">Ts to write.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.SetValues``1(``0[],System.Int32,``0[],System.Int32)">
            <summary>
            Sets the Ts starting at 'destIndex' to the Ts from 'source' starting at 'sourceIndex'.
            </summary>
            <param name="b1"></param>
            <param name="destIndex">Zero-based index to start writing in the destination array.</param>
            <param name="source">Ts to write.</param>
            <param name="sourceIndex">Index of first value to copy from 'values'.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.SetValues``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            Sets the 'numToCopy' Ts starting at 'destIndex' to the Ts from 'source' starting at 'sourceIndex'.
            </summary>
            <param name="b1"></param>
            <param name="destIndex">Zero-based index to start writing in the destination array.</param>
            <param name="source">Ts to write.</param>
            <param name="sourceIndex">Index of first value to copy from 'values'.</param>
            <param name="numToCopy">Number of values to copy.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.MapInplace``1(``0[],System.Func{``0,``0})">
            <summary>
            Performs an inplace-transformation, that is it calls the specified delegate for every entry of the array and assigns
            the return value to the array-entry. Returns the array (for chaining).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="transformator"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="transformator" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Map``2(``0[],System.Func{``0,``1})">
            <summary>
            Calls the specified delegate for each array entry and returns an array holding the results in the same order.
            </summary>
            <typeparam name="TSource">Type of the input array.</typeparam>
            <typeparam name="TDest">Type of the output array.</typeparam>
            <param name="source"></param>
            <param name="transformator"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="transformator" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Map``2(``0[],System.Func{``0,``1},``1[],System.Int32)">
            <summary>
            Calls the specified delegate for each array entry and copies the entries to the specified output array beginning at index.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
            <param name="source"></param>
            <param name="transformator"></param>
            <param name="dest"></param>
            <param name="destIndex"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <c>null</c>.</exception>
            <exception cref="T:cope.CopeException">Destination array is too small to hold all source entries or the selected starting index is too big.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The specified index is out of range in the destination array.</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Map``2(``0[],System.Func{``0,``1},``1[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a number of elements starting at a specified index in an array and stores the result of the transformation in a provided
            destination array (where they are also placed starting at a given index).
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
            <param name="source">The array containing the items to be transformed.</param>
            <param name="transformator">The transformation function to be applied.</param>
            <param name="dest">The destination array for the operation.</param>
            <param name="destIndex">The index in the destination array to start writing the transformed items to.</param>
            <param name="sourceIndex">The index in the source array to start transforming elements.</param>
            <param name="numToTransform">The number of elements that are to be converted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The specified index is out of range in the destination array.</exception>
            <exception cref="T:cope.CopeException">Destination array is too small to hold all source entries or the selected starting index is too big.</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Flatten``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Flattens an IEnumerable of an array-type to a single array.
            This operation will evaluate the IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Flatten``1(System.Collections.Generic.IEnumerable{``0[]},``0[],System.Int32)">
            <summary>
            Flattens an IEnumerable of an array-type into a specified array, writing the entries starting at a specified index.
            This operation will evaluate the IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrays">The IEnumerable of arrays to flatten.</param>
            <param name="dest">The destination array to write the flattened version to.</param>
            <param name="destIndex">The index to start writing values in the destination array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="arrays" /> is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The destination index must be inside the range of the destination array.</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.TransformRectangular``1(``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Func{``0,``0})">
            <summary>
            Calls the specified function for all entries in this array from [fromX,fromY] to [toX - 1,toY - 1] and assigns
            the returned value of the function to the corresponding array entry.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="fromX"></param>
            <param name="fromY"></param>
            <param name="toX"></param>
            <param name="toY"></param>
            <param name="func"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Parameter fromX must be within the array's limits!</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.ApplyToCellAndNeighbors``1(``0[0:,0:],System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Calls the specified function for the specified cell and all its neighbors (also for the diagonal neighbors).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="func"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="func" /> is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Parameter x must be within the array's limits!</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.ApplyToCellAndNeighbors``1(``0[0:,0:],System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Calls the specified function for the specified cell and all its neighbors (also for the diagonal neighbors).
            It will stop as soon as the function returns true. Returns false if it terminated early, otherwise false.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="func"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="func" /> is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Parameter x must be within the array's limits!</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.ApplyToCellAndNeighbors``1(``0[0:,0:],System.Int32,System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Calls the specified function for the specified cell and all its neighbors (also for the diagonal neighbors).
            It will stop as soon as the function returns true. Returns false if it terminated early, otherwise false.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="func"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="func" /> is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Parameter x must be within the array's limits!</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Collapse``1(``0[0:,0:][],System.Func{``0,``0,``0})">
            <summary>
            Collapses this array of two dimensional arrays into a single two dimensional array using the specified
            merger function. This function assumes that all the two dimensional arrays are of the same size.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="merger"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Rectangle``1(``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the entries of the array which are inside the rectangle from [fromX,fromY] to [toX - 1,toY - 1];
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="fromX"></param>
            <param name="fromY"></param>
            <param name="width"></param>
            <param name="height"></param>
            <exception cref="T:System.Exception">Parameter fromX must be within the array's limits!</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Circle``1(``0[0:,0:],System.Int32,System.Int32,System.Double)">
            <summary>
            Applies the specified function to all entries of an array whose distance is at max 'radius' from the
            specified point in the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="centerX">This is the first index (coordinate) of the center of the circle.</param>
            <param name="centerY">This is the second index (coordinate) of the center of the circle.</param>
            <param name="radius">This is the maximum euclidean distance of points to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Dim1 must be within the array.</exception>
        </member>
        <member name="M:cope.Extensions.ArrayExt.Ring``1(``0[0:,0:],System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Applies the specified function to all entries of an array whose distance is at max 'radius' from the
            specified point in the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="centerY">This is the first index (coordinate) of the center of the circle.</param>
            <param name="centerX">This is the second index (coordinate) of the center of the circle.</param>
            <param name="radius">This is the maximum euclidean distance of points to process.</param>
            <param name="minRadius">This is the minimum euclidean distance of points to process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Dim1 must be within the array.</exception>
        </member>
        <member name="T:cope.Extensions.UIntExt">
            <summary>
            Extension class for UInt32.
            </summary>
        </member>
        <member name="M:cope.Extensions.UIntExt.RotateRight(System.UInt32,System.Int32)">
            <summary>
            Rotates the specified uint by 'count' bits right.
            </summary>
            <param name="u"></param>
            <param name="count">Number of bits to rotate by.</param>/param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.UIntExt.RotateLeft(System.UInt32,System.Int32)">
            <summary>
            Rotates the specified uint by 'count' bits left.
            </summary>
            <param name="u"></param>
            <param name="count">Number of bits to rotate by.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.UIntExt.ReverseBytes(System.UInt32)">
            <summary>
            Reverses the bytes of this UInt32.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.UIntExt.ToByteArray(System.UInt32)">
            <summary>
            Returns a Byte-Array containing the byte representation of this UInt32.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Extensions.StringExt">
            <summary>
            Static class offering lots of useful functions for strings.
            </summary>
        </member>
        <member name="M:cope.Extensions.StringExt.Equals(System.String,System.Text.StringBuilder)">
            <summary>
            Determines whether the content of this string and the content of a specified StringBuilder are the same.
            Mind that the content's equality is independent of the StringBuilder's capacity-property.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="sb">StringBuilder to compare to.</param>
            <returns>True if the contents of both the <c>string</c> and the <c>StringBuilder</c> are equal.</returns>
        </member>
        <member name="M:cope.Extensions.StringExt.IsAscii(System.String)">
            <summary>
            Returns whether this string is an Ascii string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.ConvertTo``1(System.String)">
            <summary>
            Tries to convert the content of this string to a given type using the TypeConverters available
            via the <c>TypeDescriptor</c> class. May throw an <c>CopeException</c> if there is no TypeConverter
            available for the given type.
            </summary>
            <typeparam name="T">The type to convert the string to.</typeparam>
            <param name="str">The string to operate on.</param>
            <returns>Returns the converted value.</returns>
            <exception cref="T:cope.CopeException">Thrown when there is no appropriate converter available.</exception>
        </member>
        <member name="M:cope.Extensions.StringExt.ConvertTo``1(System.String,``0)">
            <summary>
            Tries to convert the content of this string to a given type using the TypeConverters available
            via the <c>TypeDescriptor</c> class. You may specify an alternative value to be used when the 
            conversion fails or if there is no converter available.
            </summary>
            <typeparam name="T">The type to convert the string to.</typeparam>
            <param name="str">The string to operate on.</param>
            <param name="alternative">The alternative value to return if the operation should fail.</param>
            <returns>Returns the converted value or the alternative.</returns>
        </member>
        <member name="M:cope.Extensions.StringExt.IndexOf(System.String,cope.CharType)">
            <summary>
            Returns the zero-based index of the first occurence of a char of CharType. Returns -1 if CharType  couldn't be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.IndexOf(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns the zero-based position of the first instance of searchString. Returns -1 if searchString couldn't be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchString">StringBuilder to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.LastIndexOf(System.String,cope.CharType)">
            <summary>
            Returns the zero-based index of the last occurence of a char of CharType. Returns -1 if CharType  couldn't be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="ct">CharType  to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.LastIndexOf(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns the zero-based position of the last instance of searchString. Returns -1 if searchString couldn't be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchString">StringBuilder to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.IndicesOfAll(System.String,System.Char)">
            <summary>
            Returns an array containing each zero-based position of the searchChar in this instance. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.IndicesOfAll(System.String,cope.CharType)">
            <summary>
            Returns an array containing each zero-based position of a char of CharType  in this instance.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="ct">CharType  to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.IndexOfAny(System.String,cope.CharType[])">
            <summary>
            Returns the zero-based index of the first occurence of a char of any of the specified CharTypes. Returns -1 if nothing could be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charTypes">CharTypes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.LastIndexOfAny(System.String,cope.CharType[])">
            <summary>
            Returns the zero-based index of the last occurence of a char of any of the specified CharTypes. Returns -1 if nothing could be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charTypes">CharTypes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.HasCharAt(System.String,System.Int32,System.Char)">
            <summary>
            Checks whether or not the character at position 'idx' and the specified character are equal.
            If 'idx' is greater or equal to the string's length, the method returns false.
            </summary>
            <param name="str"></param>
            <param name="idx"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.HasCharAt(System.String,System.Int32,cope.CharType)">
            <summary>
            Checks whether or not the character at position 'idx' is of the specified type.
            If 'idx' is greater or equal to the string's length, the method returns false.
            </summary>
            <param name="str"></param>
            <param name="idx"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.HasCharAt(System.String,System.Int32,System.Func{System.Char,System.Boolean})">
            <summary>
            Checks whether or not the character at position 'idx' satisfies the given predicate.
            If 'idx' is greater or equal to the string's length, the method returns false.
            </summary>
            <param name="str"></param>
            <param name="idx"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.FirstCharFrom(System.String,System.Int32,cope.CharType,System.Char@)">
            <summary>
            Searches for the first character which is of the specified type starting at the specified index.
            Returns true if there is a character of the specified CharType, otherwise false. The character
            which has been found is available via an out parameter.
            </summary>
            <param name="str"></param>
            <param name="idx"></param>
            <param name="ct"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.EndsWith(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns true if this instance ends with the specified value. Returns false if the value to check against is longer than the string to check itself.
            </summary>
            <param name="str"></param>
            <param name="end">StringBuilder which the end is compared to.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.EndsWith(System.String,System.Char)">
            <summary>
            Returns true if this instance ends with the specified value. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="end">Character which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.EndsWith(System.String,cope.CharType)">
            <summary>
            Returns true if this instance ends with the specified value. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charType">CharacterType which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.EndsWithAny(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if this instance ends with any of the specified chars. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="ends">Characters which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.EndsWithAny(System.String,System.Char[])">
            <summary>
            Returns true if this instance ends with any of the specified chars. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="ends">Characters which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.EndsWithAny(System.String,System.Collections.Generic.IEnumerable{cope.CharType})">
            <summary>
            Returns true if this instance ends with a char of any of the specified CharTypes. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charTypes">CharTypes which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.EndsWithAny(System.String,cope.CharType[])">
            <summary>
            Returns true if this instance ends with a char of any of the specified CharTypes. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charTypes">CharTypes which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.EndsWithAny(System.String,System.String[])">
            <summary>
            Returns true if this instance ends with any of the specified strings. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="strings">Strings which the end is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.StartsWith(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns true if this instance begins with the specified value. Returns false if the value to check against is longer than the string to check itself.
            </summary>
            <param name="str"></param>
            <param name="beginning">StringBuilder which the beginning is compared to.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.StartsWith(System.String,System.Char)">
            <summary>
            Returns true if this instance begins with the specified value. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="beginning">Character which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.StartsWith(System.String,cope.CharType)">
            <summary>
            Returns true if this instance begins with the specified value. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charType">CharacterType which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns true if this instance begins with any of the specified strings. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="beginnings">Strings which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if this instance begins with any of the specified chars. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="beginnings">Characters which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.StartsWithAny(System.String,System.Char[])">
            <summary>
            Returns true if this instance begins with any of the specified chars. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="beginnings">Characters which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{cope.CharType})">
            <summary>
            Returns true if this instance begins with a char of any of the specified CharTypes. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charTypes">CharTypes which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.StartsWithAny(System.String,cope.CharType[])">
            <summary>
            Returns true if this instance begins with a char of any of the specified CharTypes. Returns false if the value to check against is longer than the string to check itself. Not case-sensitve.
            </summary>
            <param name="str"></param>
            <param name="charTypes">CharTypes which the beginning is compared to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Contains(System.String,System.Char)">
            <summary>
            Returns true if the string contains the specified character.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="c">Value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Contains(System.String,cope.CharType)">
            <summary>
            Returns true if the string contains a character of the specified CharType.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charType">Value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Contains(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns true if the string contains the string in the specified StringBuilder.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchString">Value to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.ContainsAny(System.String,System.Char[])">
            <summary>
            Returns true if the string contains any of the specified characters.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="c">Chars to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.ContainsAny(System.String,cope.CharType[])">
            <summary>
            Returns true if the string contains a character of any of the specified CharTypes.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charTypes">CharTypes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Count(System.String,System.Char)">
            <summary>
            Returns the number of occurences of searchChar. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Count(System.String,System.Char[])">
            <summary>
            Returns the number of occurences of any of the searchChars. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChars">Chars to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Count(System.String,cope.CharType)">
            <summary>
            Returns the number of occurences of chars of CharType.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Count(System.String,cope.CharType[])">
            <summary>
            Returns the number of occurences of chars of any of the given CharTypes.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charTypes">CharTypes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Count(System.String,System.String,System.Boolean)">
            <summary>
            Returns the number of occurences of searchString.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchString">String to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Count(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Returns the number of occurences of searchString.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchString">StringBuilder to search for.</param>
            <param name="ignoreCase">Set to true to ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.CountWhile(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
            <summary>
            Counts characters starting at 'startIndex' while the given predicate is satisfied. It will stop
            as soon as it hits a character which does not satisfy the predicate.
            </summary>
            <param name="str">The string to count in.</param>
            <param name="predicate">The predicate which the characters to count need to satisfy.</param>
            <param name="startIndex">The index to start counting at.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.CountWhile(System.String,cope.CharType,System.Int32)">
            <summary>
            Counts characters starting at 'startIndex' while the characters are of the given CharType. It will stop
            as soon as it hits a character which is not of the specified CharType.
            </summary>
            <param name="str">The string to count in.</param>
            <param name="ct">The predicate which the characters to count need to satisfy.</param>
            <param name="startIndex">The index to start counting at.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.TakeWhile(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
            <summary>
            Takes characters from string starting at the specified index for as long as the characters satisfy
            the provided predicate.
            </summary>
            <param name="str"></param>
            <param name="predicate"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the substring starting at 'startIndex' going for 'length'. Unlike the Substring method, this method does not throw
            any exceptions. Should startIndex + length exceed the string's length, this method will return the substring starting at
            'startIndex' to the end of the string. In any other case where Substring would throw an exception, this method will return
            the empty string.
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringSafe(System.String,System.Int32)">
            <summary>
            Returns the substring starting at 'startIndex' going for 'length'. Unlike the Substring method, this method does not throw
            any exceptions. Should startIndex + length exceed the string's length, this method will return the substring starting at
            'startIndex' to the end of the string. In any other case where Substring would throw an exception, this method will return
            the empty string.
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringBetweenOccurrencs(System.String,System.Int32,System.Int32,System.Char)">
            <summary>
            Returns the substring between the Nth and the Mth occurence of the search char. If there are less than M occurrences
            in the string it returns the unmodified string.
            </summary>
            <param name="str"></param>
            <param name="nthOcc">Nth occurence.</param>
            <param name="mthOcc">Mth occurence.</param>
            <param name="searchChar">The char to search for.</param>
            <returns></returns>
            <exception cref="T:cope.CopeException">The first occurrence must obviously be a smaller number than the second occurrence!</exception>
        </member>
        <member name="M:cope.Extensions.StringExt.Split(System.String,System.StringSplitOptions,System.Char[])">
            <summary>
            Performs splitting of a string just as the original split method. In contrast to the original, this method
            takes the StringSplitOptions as a first parameter which allows for the split-characters to be passed in
            'params'-style.
            </summary>
            <param name="str"></param>
            <param name="options"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Split(System.String,System.StringSplitOptions,System.String[])">
            <summary>
            Performs splitting of a string just as the original split method. In contrast to the original, this method
            takes the StringSplitOptions as a first parameter which allows for the split-strings to be passed in
            'params'-style.
            </summary>
            <param name="str"></param>
            <param name="options"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Split(System.String,System.String[])">
            <summary>
            Performs splitting of a string just as the original split method. In contrast to the original, this method
            allows for the split-strings to be passed in 'params'-style.
            </summary>
            <param name="str"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Split(System.String,System.Int32)">
            <summary>
            Splits this string into chunks of a given length.
            </summary>
            <param name="str"></param>
            <param name="lengthOfParts">Length of the parts to split the string into.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SplitAtLast(System.String,System.String,System.String@,System.String@)">
            <summary>
            Splits a string into two parts using the last occurence of the given splitter. The splitter will not be part of any of the resulting strings.
            Returns true if the splitter was part of the string, otherwise false. If the splitter did not occur in the string, firstPath will hold the input string
            and secondPart will hold the empty string.
            </summary>
            <param name="str">String to split.</param>
            <param name="splitter">The splitter string.</param>
            <param name="firstPart">Part of the string before the splitter.</param>
            <param name="secondPart">Part of the string after the splitter.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SplitAtLast(System.String,System.Char,System.String@,System.String@)">
            <summary>
            Splits a string into two parts using the last occurence of the given splitter. The splitter will not be part of any of the resulting strings.
            Returns true if the splitter was part of the string, otherwise false. If the splitter did not occur in the string, firstPath will hold the input string
            and secondPart will hold the empty string.
            </summary>
            <param name="str">String to split.</param>
            <param name="splitter">The splitter character.</param>
            <param name="firstPart">Part of the string before the splitter.</param>
            <param name="secondPart">Part of the string after the splitter.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SplitAtLast(System.String,cope.CharType,System.String@,System.String@)">
            <summary>
            Splits a string into two parts using the last occurence of the given splitter. The splitter will not be part of any of the resulting strings.
            Returns true if the splitter was part of the string, otherwise false. If the splitter did not occur in the string, firstPath will hold the input string
            and secondPart will hold the empty string.
            </summary>
            <param name="str">String to split.</param>
            <param name="splitter">The splitter CharType.</param>
            <param name="firstPart">Part of the string before the splitter.</param>
            <param name="secondPart">Part of the string after the splitter.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SplitAtFirst(System.String,System.String,System.String@,System.String@)">
            <summary>
            Splits a string into two parts using the first occurence of the given splitter. The splitter will not be part of any of the resulting strings.
            Returns true if the splitter was part of the string, otherwise false. If the splitter did not occur in the string, firstPath will hold the input string
            and secondPart will hold the empty string.
            </summary>
            <param name="str">String to split.</param>
            <param name="splitter">The splitter string.</param>
            <param name="firstPart">Part of the string before the splitter.</param>
            <param name="secondPart">Part of the string after the splitter.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SplitAtFirst(System.String,System.Char,System.String@,System.String@)">
            <summary>
            Splits a string into two parts using the first occurence of the given splitter. The splitter will not be part of any of the resulting strings.
            Returns true if the splitter was part of the string, otherwise false. If the splitter did not occur in the string, firstPath will hold the input string
            and secondPart will hold the empty string.
            </summary>
            <param name="str">String to split.</param>
            <param name="splitter">The splitter character.</param>
            <param name="firstPart">Part of the string before the splitter.</param>
            <param name="secondPart">Part of the string after the splitter.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SplitAtFirst(System.String,cope.CharType,System.String@,System.String@)">
            <summary>
            Splits a string into two parts using the first occurence of the given splitter. The splitter will not be part of any of the resulting strings.
            Returns true if the splitter was part of the string, otherwise false. If the splitter did not occur in the string, firstPath will hold the input string
            and secondPart will hold the empty string.
            </summary>
            <param name="str">String to split.</param>
            <param name="splitter">The splitter CharType.</param>
            <param name="firstPart">Part of the string before the splitter.</param>
            <param name="secondPart">Part of the string after the splitter.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SplitAt(System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            Splits a string into two parts. The split index determines where the first part of the string ends, the splitter length determines how many characters
            to ignore before the second part of the string begins. If split index is great than the maximum index, it will return the original string and the out-parameter
            will be the empty string.
            Return the first part of the split, the second part is available as an out-parameter.
            </summary>
            <param name="str">The string to split.</param>
            <param name="splitIdx">The index of the splitter, this is where the first part ends.</param>
            <param name="splitterLength">The length of the splitter, add this to the split index to get where the second part starts.</param>
            <param name="secondPart">Part of the string after the splitter.</param>
            <returns>Part of the string before the splitter.</returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringAfterLast(System.String,System.String,System.Boolean)">
            <summary>
            Returns the string after the last occurence of searchString or the string itself if searchString couldn't be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchString">String to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringAfterLast(System.String,System.Char,System.Boolean)">
            <summary>
            Returns the string after the last occurence of searchChar or the string itself if searchChar couldn't be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchString.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringAfterLast(System.String,System.Char[],System.Boolean)">
            <summary>
            Returns the string after the last occurence of any of the searchChars or the string itself if no searchChar could be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChars">Chars to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringAfterLast(System.String,cope.CharType,System.Boolean)">
            <summary>
            Returns the string after the last occurence of searchChar or the string itself if searchChar couldn't be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringAfterFirst(System.String,System.String,System.Boolean)">
            <summary>
            Returns the string after the first occurence of searchString or the string itself if searchString couldn't be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchString">String to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchString.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringAfterFirst(System.String,System.Char,System.Boolean)">
            <summary>
            Returns the string after the first occurence of searchChar or the string itself if searchChar couldn't be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringAfterFirst(System.String,System.Char[],System.Boolean)">
            <summary>
            Returns the string after the first occurence of any of the searchChars or the string itself if no searchChar could be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChars">Chars to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringAfterFirst(System.String,cope.CharType,System.Boolean)">
            <summary>
            Returns the string after the first occurence of searchChar or the string itself if searchChar couldn't be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringBeforeLast(System.String,System.String,System.Boolean)">
            <summary>
            Returns the string before the last occurence of searchString or the string itself if searchString couldn't be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchString">String to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchString.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringBeforeLast(System.String,System.Char,System.Boolean)">
            <summary>
            Returns the string before the last occurence of searchChar or the string itself if searchChar couldn't be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringBeforeLast(System.String,System.Char[],System.Boolean)">
            <summary>
            Returns the string before the last occurence of any of the searchChars or the string itself if no searchChar could be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChars">Chars to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringBeforeLast(System.String,cope.CharType,System.Boolean)">
            <summary>
            Returns the string before the last occurence of searchChar or the string itself if searchChar couldn't be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringBeforeFirst(System.String,System.String,System.Boolean)">
            <summary>
            Returns the string before the first occurence of searchString or the string itself if searchString couldn't be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchString">String to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchString.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringBeforeFirst(System.String,System.Char,System.Boolean)">
            <summary>
            Returns the string before the first occurence of searchChar or the string itself if searchChar couldn't be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChar">Char to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringBeforeFirst(System.String,System.Char[],System.Boolean)">
            <summary>
            Returns the string before the first occurence of any of the searchChars or the string itself if no searchChar could be found. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="searchChars">Chars to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.SubstringBeforeFirst(System.String,cope.CharType,System.Boolean)">
            <summary>
            Returns the string before the first occurence of searchChar or the string itself if searchChar couldn't be found.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charType">CharType  to search for.</param>
            <param name="including">Set to true to return the string including the found occurence of the searchChar.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Replace(System.String,System.Char,System.Char[])">
            <summary>
            Replaces all occurences of oldChars with newChar. Case-sensitive.
            </summary>
            <param name="str">The string to operate on.</param>
            <param name="oldChars">The chars to replace.</param>
            <param name="newChar">The new char.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Replace(System.String,System.Char[],System.Char[])">
            <summary>
            Replaces all occurences of oldChars with newChars (so if oldChars[0] is found it's replaced with newChars[0]).
            If oldChars is bigger than newChars for every [i] > newChars.Length newChars[length-1] is used. Case-sensitive.
            </summary>
            <param name="str">The string to operate on.</param>
            <param name="oldChars">The chars to replace.</param>
            <param name="newChars">The new chars.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Replace(System.String,cope.CharType,System.Char)">
            <summary>
            Replaces all occurences of Chars of a special CharType  with newChar.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charType">CharType  to replace.</param>
            <param name="newChar">Char to insert.</param>
        </member>
        <member name="M:cope.Extensions.StringExt.Replace(System.String,System.Char,cope.CharType[])">
            <summary>
            Replaces all occurences of Chars of a any of the specified CharTypes with newChar.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charTypes">CharTypes to replace.</param>
            <param name="newChar">Char to insert.</param>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveAll(System.String,System.Char)">
            <summary>
            Removes all chars with the specified value c from str. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="c">Char to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveAll(System.String,System.Char[])">
            <summary>
            Removes all chars with any of the specified values c from str. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="chars">Chars to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveAll(System.String,cope.CharType)">
            <summary>
            Removes all chars of the specified CharType  from str.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charType">CharType  to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveAll(System.String,cope.CharType[])">
            <summary>
            Removes all chars of the specified CharTypes from str.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charTypes">CharTypes to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveAllBut(System.String,System.Char)">
            <summary>
            Removes everything but the specified value. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="c">Char to keep.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveAllBut(System.String,System.Char[])">
            <summary>
            Removes everything but the specified value. Case-sensitive.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="chars">Chars to keep.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveAllBut(System.String,cope.CharType)">
            <summary>
            Removes everything but the specified value.
            </summary>
            <param name="str">String to operate on</param>
            <param name="charType">CharType  to keep.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveAllBut(System.String,cope.CharType[])">
            <summary>
            Removes everything but the specified value.
            </summary>
            <param name="str">String to operate on.</param>
            <param name="charTypes">CharTypes to keep.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveLast(System.String,System.Int32)">
            <summary>
            Removes the last 'count' characters from a string.
            </summary>
            <param name="str"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemoveFirst(System.String,System.Int32)">
            <summary>
            Removes the first 'count' characters from a string.
            </summary>
            <param name="str"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Reverse(System.String)">
            <summary>
            Reverses a string.
            </summary>
            <param name="str">String to operate on.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Insert(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Inserts the given string at the specified index 'count'-times.
            </summary>
            <param name="str"></param>
            <param name="str2">The string to be inserted.</param>
            <param name="startIndex">The index where to insert.</param>
            <param name="count">The number of times to insert the string</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Append(System.String,System.String,System.Int32)">
            <summary>
            Appends the specified string 'count'-times.
            </summary>
            <param name="str"></param>
            <param name="str2">The string to be appended.</param>
            <param name="count">The number of times it shall be appended.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Prepend(System.String,System.String,System.Int32)">
            <summary>
            Prepends the specified string 'count'-times.
            </summary>
            <param name="str"></param>
            <param name="str2">The string to be prepended.</param>
            <param name="count">The number of times it shall be prepended.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.Limit(System.String,System.Int32)">
            <summary>
            Limits the length of a string returning either the string if its length is below the limit or a substring of the original string.
            </summary>
            <param name="str"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemovePrefix(System.String,System.String)">
            <summary>
            Removes a prefix from a string.
            </summary>
            <param name="str"></param>
            <param name="prefix">The prefix to remove from the string.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemovePrefix(System.String,System.String[])">
            <summary>
            Removes the first occurence of any of the given prefixes from a string.
            </summary>
            <param name="str"></param>
            <param name="prefixes">The prefixes to check for (and remove the first found).</param>
            <returns></returns>
        </member>
        <member name="M:cope.Extensions.StringExt.RemovePrefix(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the first occurence of any of the given prefixes from a string.
            </summary>
            <param name="str"></param>
            <param name="prefixes">The prefixes to check for (and remove the first found).</param>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.EnumerationOptions">
            <summary>
            Provides options for the FileSystem enumerators.
            </summary>
        </member>
        <member name="M:cope.FileSystem.FileSystemEntryExt.GetName(cope.FileSystem.IFileSystemEntry)">
            <summary>
            Returns the name of the given IFileSystemEntry.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.FileSystemPossibility">
            <summary>
            Represents the different possible actions for an entry of a virtual file system.
            Not to be confused with file permissions.
            </summary>
        </member>
        <member name="T:cope.FileSystem.IShadowFileDescriptor">
            <summary>
            Interface for shadowed files of a virtual file system.
            A shadow-file has a read-only copy (a 'shadow') attached to it, which may be used instead of the original file.
            </summary>
        </member>
        <member name="M:cope.FileSystem.IShadowFileDescriptor.GetShadow">
            <summary>
            Returns the shadow of this file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.RealFileDescriptor.CompareTo(cope.FileSystem.IFileSystemEntry)">
            <summary>
            Compars this instance's path to another instance's path.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.RealFileDescriptor.GetPath">
            <summary>
            Returns the relative path of this file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.RealFileDescriptor.Open(cope.FileSystem.FileOpenOptions)">
            <summary>
            Opens this file using the specified FileOpenOptions.
            </summary>
            <param name="opt"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.RealFileDescriptor.SupportsFileOpenOptions">
            <summary>
            Returns whether this file supports file opening options.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.RealFileDescriptor.GetSize">
            <summary>
            Retuns the size of this file in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.RealFileDescriptor.GetLastModified">
            <summary>
            Returns the time this file has last been modified.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.ShadowedLocalDirectoryDescriptor">
            <summary>
            DirectoryDescriptor used by the ShadowedLocalFileSystem class.
            Supports shadowing.
            </summary>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.HasShadow(System.String)">
            <summary>
            Returns whether the entry with the specified name has a shadow.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.GetDirectory(System.String)">
            <summary>
            Returns the directory at the specified path or null if there is none.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.GetFile(System.String)">
            <summary>
            Returns the file at the specified path of null if there is none.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.HasDirectory(System.String)">
            <summary>
            Returns whether there is a directory at the specified path.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.HasFile(System.String)">
            <summary>
            Returns whether there is a file at the specified path.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.GetFiles">
            <summary>
            Returns all files in this directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.GetDirectories">
            <summary>
            Returns all subdirectories of this directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.CreateShadowDir(System.String)">
            <summary>
            Creates a new shadow directory with the specified name and adds it to this instance's shadows.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.GetShadowDir(System.String)">
            <summary>
            Returns the shadow directory with the specified name or null if there is no such shadow directory.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalDirectoryDescriptor.AddShadowFile(System.String,cope.FileSystem.IFileDescriptor)">
            <summary>
            Adds a shadowed file with the specified name to this instance's shadows.
            </summary>
            <param name="name"></param>
            <param name="shadow"></param>
        </member>
        <member name="T:cope.FileSystem.ShadowedLocalFileDescriptor">
            <summary>
            FileDescriptor used by the ShadowedLocalFileSystem class.
            </summary>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileDescriptor.GetShadow">
            <summary>
            Returns the shadow of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileDescriptor.HasRealFile">
            <summary>
            Returns whether this shadowed file has a real file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.ShadowedLocalFileSystem">
            <summary>
            Class which implements the IFileSystem-interface and provides access to the local file system.
            This class provides support for shadowing.
            </summary>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileSystem.#ctor(System.String)">
            <summary>
            Constructs a new LocalFileSystem starting at a given base path.
            </summary>
            <param name="basePath"></param>
            <exception cref="T:cope.CopeException">The specified base path does not exist!</exception>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileSystem.GetDirectoryShadowed(System.String)">
            <summary>
            Returns the shadowed directory at the given path or null if there is no such directory.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileSystem.DoesDirectoryExist(System.String)">
            <summary>
            Returns whether there exists a directory at the specified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileSystem.GetDirectory(System.String)">
            <summary>
            Returns the directory at the specified path or null if there is no such directory.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileSystem.GetFileShadowed(System.String)">
            <summary>
            Returns the shadowed file at the specified path or null if there is no such file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileSystem.DoesFileExist(System.String)">
            <summary>
            Returns whether a file exists at the specified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileSystem.GetFile(System.String)">
            <summary>
            Returns the file at the specified path or null if there is no such file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileSystem.AddShadow(System.String,cope.FileSystem.IFileDescriptor)">
            <summary>
            Adds the specified shadow file at the given path.
            Returns true if adding a shadow succeeded, otherwise false. It will not succeed, if there already is a shadow for the specified path.
            </summary>
            <param name="relativePath"></param>
            <param name="shadowFile"></param>
        </member>
        <member name="M:cope.FileSystem.ShadowedLocalFileSystem.GetOrCreateShadowDir(System.String)">
            <summary>
            Tries to get the shadow directory at the specified path or creates it if it does not exist.
            </summary>
            <param name="relativePath"></param>
        </member>
        <member name="T:cope.FileSystem.FileOpenOptions">
            <summary>
            Provides different Options for opening files
            Not all implementations need to support these.
            </summary>
        </member>
        <member name="T:cope.FileSystem.FileSystemEnumeratorBase">
            <summary>
            Base class for enumerators enumerating file system entries.
            Recursively walks the file system starting at the given starting directory (using DFS) and enumerates its contents.
            </summary>
        </member>
        <member name="P:cope.FileSystem.FileSystemEnumeratorBase.SortValues">
            <summary>
            Gets whether the values returned by this FileSystemEnumerator will be returned in sorted order.
            Sorting takes time!
            </summary>
        </member>
        <member name="P:cope.FileSystem.FileSystemEnumeratorBase.Options">
            <summary>
            Gets the EnumerationOptions for this enumerator. These set what kind of things it should enumerate.
            </summary>
        </member>
        <member name="T:cope.FileSystem.FileSystemWalker">
            <summary>
            Recursively walks the file system.
            </summary>
        </member>
        <member name="P:cope.FileSystem.FileSystemWalker.RootDirectory">
            <summary>
            Gets the directory this FileSystemWalker is operating on.
            </summary>
        </member>
        <member name="P:cope.FileSystem.FileSystemWalker.SortValues">
            <summary>
            Gets or sets whether to sort the values prior to returning them.
            </summary>
        </member>
        <member name="P:cope.FileSystem.FileSystemWalker.Options">
            <summary>
            Gets or sets what to enumerate.
            </summary>
        </member>
        <member name="T:cope.FileSystem.FileWalker">
            <summary>
            Recursively walks the file system but only enumerats its files.
            </summary>
        </member>
        <member name="P:cope.FileSystem.FileWalker.RootDirectory">
            <summary>
            Gets the root directory this FileWalker is operating on.
            </summary>
        </member>
        <member name="P:cope.FileSystem.FileWalker.SortValues">
            <summary>
            Gets or sets whether to sort the values prior to returning them.
            </summary>
        </member>
        <member name="M:cope.FileSystem.IFileSystem.DoesFileExist(System.String)">
            <summary>
            Checks whether a file exists at the specified location.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileSystem.DoesDirectoryExist(System.String)">
            <summary>
            Checks whether a directory exists at the specified location.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileSystem.GetElement(System.String)">
            <summary>
            Returns the element at the specified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileSystem.GetFile(System.String)">
            <summary>
            Returns the file at the specified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileSystem.GetDirectory(System.String)">
            <summary>
            Returns the directory at the specified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileSystem.GetRoot">
            <summary>
            Returns the root directory of this instance of IFileSystem.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.IFileDescriptor">
            <summary>
            Interface for files of a virtual file system.
            </summary>
        </member>
        <member name="M:cope.FileSystem.IFileDescriptor.Open">
            <summary>
            Opens the file for any operations supported by the current file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileDescriptor.Open(cope.FileSystem.FileOpenOptions)">
            <summary>
            Tries to open the file with a given set of options. May not work, depending on the file system.
            </summary>
            <param name="opt"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileDescriptor.SupportsFileOpenOptions">
            <summary>
            Returns whether this file descriptor supports FileOpenOptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileDescriptor.GetSize">
            <summary>
            Returns the size of this file in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileDescriptor.GetLastModified">
            <summary>
            Returns the date of the last modification of this file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.IFileSystemEntry">
            <summary>
            Interface for all kinds of entries of a virtual file system.
            There are two properties common to all of them: They all got a path and a set of permissions.
            </summary>
        </member>
        <member name="M:cope.FileSystem.IFileSystemEntry.GetPath">
            <summary>
            Returns the path to this entry in the file system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IFileSystemEntry.GetPossibleActions">
            <summary>
            Gets the possible actions for this entry of the file system.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.IDirectoryDescriptor">
            <summary>
            Interface for a directory of a virtual file system.
            A static 
            </summary>
        </member>
        <member name="M:cope.FileSystem.IDirectoryDescriptor.CreateFile(System.String)">
            <summary>
            Creates a new file.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:cope.FileSystem.IDirectoryDescriptor.CreateDirectory(System.String)">
            <summary>
            Creates a new directory.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:cope.FileSystem.IDirectoryDescriptor.Delete(System.String)">
            <summary>
            Deletes the element with the given namen and returns whether or not the element existed prior to deletion.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IDirectoryDescriptor.HasFile(System.String)">
            <summary>
            Returns whether or not there is a file with the specified name in this instance of DirectoryDescriptor.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IDirectoryDescriptor.HasDirectory(System.String)">
            <summary>
            Returns whether or not therese is a directory with the specified name in this instance of DirectoryDescriptor.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IDirectoryDescriptor.GetDirectories">
            <summary>
            Returns all subdirectories of this directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IDirectoryDescriptor.GetFiles">
            <summary>
            Returns all files of this directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.IDirectoryDescriptor.GetAll">
            <summary>
            Returns everything in this directory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.LocalDirectoryDescriptor">
            <summary>
            DirectoryDescriptor used by the LocalFileSystem class.
            </summary>
        </member>
        <member name="P:cope.FileSystem.LocalDirectoryDescriptor.FullPath">
            <summary>
            Returns the full, absolute path of this LocalDirectoryDescriptor.
            </summary>
        </member>
        <member name="M:cope.FileSystem.LocalDirectoryDescriptor.CompareTo(cope.FileSystem.IFileSystemEntry)">
            <summary>
            Compares this entry's path to another entry's path.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalDirectoryDescriptor.GetPath">
            <summary>
            Returns the relative path of this directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalDirectoryDescriptor.CreateFile(System.String)">
            <summary>
            Creates a file with the specified name in this directory.
            May throw exceptions.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:cope.FileSystem.LocalDirectoryDescriptor.CreateDirectory(System.String)">
            <summary>
            Creates a directory with the specified name in this directory.
            May throw exceptions.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:cope.FileSystem.LocalDirectoryDescriptor.Delete(System.String)">
            <summary>
            Deletes the entry with the specified name. Returns whether there was an entry with that name prior to deletion.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalDirectoryDescriptor.HasFile(System.String)">
            <summary>
            Returns whether there is a file with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalDirectoryDescriptor.HasDirectory(System.String)">
            <summary>
            Returns whether there is a directory with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalDirectoryDescriptor.GetFile(System.String)">
            <summary>
            Returns the file with the specified name or null if there is no such file.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalDirectoryDescriptor.GetDirectory(System.String)">
            <summary>
            Returns the directory with the specified name or null if there is no such directory.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.LocalFileDescriptor">
            <summary>
            FileDescriptor used by the LocalFileSystem class.
            </summary>
        </member>
        <member name="P:cope.FileSystem.LocalFileDescriptor.FullPath">
            <summary>
            Returns the full, absolute path of this LocalFileDescriptor
            </summary>
        </member>
        <member name="M:cope.FileSystem.LocalFileDescriptor.CompareTo(cope.FileSystem.IFileSystemEntry)">
            <summary>
            Compars this instance's path to another instance's path.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileDescriptor.GetPath">
            <summary>
            Returns the relative path of this file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileDescriptor.Open">
            <summary>
            Opens this file using the default file modes from the LocalFileSystem this descriptor belongs to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileDescriptor.Open(cope.FileSystem.FileOpenOptions)">
            <summary>
            Opens this file using the specified FileOpenOptions.
            </summary>
            <param name="opt"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileDescriptor.SupportsFileOpenOptions">
            <summary>
            Returns whether this file supports file opening options. LocalFileDescriptors usually do.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileDescriptor.GetSize">
            <summary>
            Retuns the size of this file in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileDescriptor.GetLastModified">
            <summary>
            Returns the time this file has last been modified.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.FileSystem.LocalFileSystem">
            <summary>
            Class which implements the IFileSystem-interface and provides access to the local file system.
            </summary>
        </member>
        <member name="M:cope.FileSystem.LocalFileSystem.#ctor(System.String)">
            <summary>
            Constructs a new LocalFileSystem starting at a given base path.
            </summary>
            <param name="basePath"></param>
            <exception cref="T:cope.CopeException">The specified base path does not exist!</exception>
        </member>
        <member name="P:cope.FileSystem.LocalFileSystem.BasePath">
            <summary>
            Gets or sets the base path for this instance of LocaFileSystem.
            </summary>
        </member>
        <member name="P:cope.FileSystem.LocalFileSystem.DefaultFileAccess">
            <summary>
            Gets or sets the default file access mode to be used when opening files without providing options.
            Default is Read.
            </summary>
        </member>
        <member name="P:cope.FileSystem.LocalFileSystem.DefaultFileMode">
            <summary>
            Gets or sets the default file mode to be used when opening files without providing options.
            Default is Open.
            </summary>
        </member>
        <member name="P:cope.FileSystem.LocalFileSystem.DefaultFileShare">
            <summary>
            Gets or sets the default file share mode to be used when opening files without providing options.
            Default is Read.
            </summary>
        </member>
        <member name="M:cope.FileSystem.LocalFileSystem.DoesFileExist(System.String)">
            <summary>
            Returns whether a file exists at the specified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileSystem.DoesDirectoryExist(System.String)">
            <summary>
            Returns whether a directory exists at the specified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileSystem.GetElement(System.String)">
            <summary>
            Returns the entry at the specified path or null if there is no entry.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileSystem.GetFile(System.String)">
            <summary>
            Returns the file at the specified path or null if there is no file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileSystem.GetDirectory(System.String)">
            <summary>
            Returns the directory at the specified path or null if there is no directory.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileSystem.GetRoot">
            <summary>
            Returns the root directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileSystem.GetDirectoryAbs(System.String)">
            <summary>
            Returns a directory given an absolute path.
            </summary>
            <param name="abspath"></param>
            <returns></returns>
        </member>
        <member name="M:cope.FileSystem.LocalFileSystem.GetFileAbs(System.String)">
            <summary>
            Returns a file given an absolute path.
            </summary>
            <param name="abspath"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Graphs.NodeCombination`1">
            <summary>
            Represents a read-only combination of nodes suitable as a key in arrays and for all other purposes.
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="T:cope.Graphs.AdjacencyMatrixGraph">
            <summary>
            Class representing an unweighted adjacency matrix graph.
            In this implementation an adjacency matrix based graph has a fixed number of nodes which are all created when the graph is created;
            </summary>
        </member>
        <member name="M:cope.Graphs.AdjacencyMatrixGraph.#ctor(System.Boolean,System.Int32)">
            <summary>
            Constructs a new graph and allocates memory for a specific amount of nodes.
            It is not possible to add nodes to an adjacency matrix graph.
            </summary>
            <param name="isDirected"></param>
            <param name="numNodes">The number of nodes this graph will have.</param>
        </member>
        <member name="M:cope.Graphs.AdjacencyMatrixGraph.#ctor(cope.Graphs.IGraph{System.Int32,System.Int32})">
            <summary>
            Copy constructor.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:cope.Graphs.AdjacencyMatrixGraph.AddEdge(System.Int32,System.Int32,System.Single)">
            <summary>
            Adds an edge between the to specified nodes to the graph.
            As this class does not support weighted edges, the weight parameter will be ignored.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.AdjacencyMatrixGraph.GetWeight(System.Int32,System.Int32)">
            <summary>
            Returns the weight of an edge or -1 if there is no edge between the two specified nodes.
            As this class does not support weighted edges, this method will return 1 for every node.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.AdjacencyMatrixGraph.SetWeight(System.Int32,System.Int32,System.Single)">
            <summary>
            Not supported by this class. Won't do anything at all.
            As SetWeight shall return whether or not the operation succeeded, it will always return false.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
        </member>
        <member name="T:cope.Graphs.BreadthFirstEnumerator`2">
            <summary>
            Implements a breadth first enumerator.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:cope.Graphs.BreadthFirstEnumerator`2.#ctor(cope.Graphs.IGraph{`0,`1},`0,System.Boolean)">
            <summary>
            Constructs a new enumerator given a graph to operate on and a start node.
            </summary>
            <param name="graph"></param>
            <param name="start">The node to start the enumeration at.</param>
            <param name="includeStartNode">If set to true, the enumerator will output the start node as the first item.</param>
        </member>
        <member name="P:cope.Graphs.BreadthFirstEnumerator`2.IncludeStartNode">
            <summary>
            Gets whether or not the start node of the enumeration is returned during the enumeration.
            </summary>
        </member>
        <member name="P:cope.Graphs.BreadthFirstEnumerator`2.NodesVisited">
            <summary>
            Gets the total number of nodes that have been visited.
            </summary>
        </member>
        <member name="M:cope.Graphs.BreadthFirstEnumerator`2.MoveNext">
            <summary>
            Moves to the next node. Returns false if there are no nodes left.
            </summary>
            <returns></returns>
        </member>
        <member name="P:cope.Graphs.BreadthFirstEnumerator`2.Current">
            <summary>
            Gets the current node.
            </summary>
        </member>
        <member name="T:cope.Graphs.BreadthFirstWalker`2">
            <summary>
            This class enables you to do a BFS-traversal over a graph
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:cope.Graphs.BreadthFirstWalker`2.#ctor(cope.Graphs.IGraph{`0,`1},`0,System.Boolean)">
            <summary>
            Constructs a new walker given a graph to operate on and a start node.
            </summary>
            <param name="graph"></param>
            <param name="start">The node to start the enumeration at.</param>
            <param name="includeStartNode">If set to true, the enumerator will output the start node as the first item.</param>
        </member>
        <member name="P:cope.Graphs.BreadthFirstWalker`2.Graph">
            <summary>
            Gets the graph this walker is operating on.
            </summary>
        </member>
        <member name="P:cope.Graphs.BreadthFirstWalker`2.StartNode">
            <summary>
            Gets the starting node for this walker.
            </summary>
        </member>
        <member name="P:cope.Graphs.BreadthFirstWalker`2.IncludeStartNode">
            <summary>
            Gets whether or not the starting node will be part of the enumeration.
            </summary>
        </member>
        <member name="T:cope.Graphs.DepthFirstEnumerator`2">
            <summary>
            Implements a depth first enumerator
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:cope.Graphs.DepthFirstEnumerator`2.#ctor(cope.Graphs.IGraph{`0,`1},`0,System.Boolean)">
            <summary>
            Constructs a new enumerator given a graph to operate on and a start node.
            </summary>
            <param name="graph"></param>
            <param name="start">The node to start the enumeration at.</param>
            <param name="includeStartNode">If set to true, the enumerator will output the start node as the first item.</param>
        </member>
        <member name="P:cope.Graphs.DepthFirstEnumerator`2.IncludeStartNode">
            <summary>
            Gets whether or not the start node of the enumeration is returned during the enumeration.
            </summary>
        </member>
        <member name="P:cope.Graphs.DepthFirstEnumerator`2.NodesVisited">
            <summary>
            Gets the total number of nodes that have been visited.
            </summary>
        </member>
        <member name="M:cope.Graphs.DepthFirstEnumerator`2.MoveNext">
            <summary>
            Moves to the next node. Returns false if there are no nodes left.
            </summary>
            <returns></returns>
        </member>
        <member name="P:cope.Graphs.DepthFirstEnumerator`2.Current">
            <summary>
            Gets the current node.
            </summary>
        </member>
        <member name="T:cope.Graphs.DepthFirstWalker`2">
            <summary>
            This class enables you to do a DFS-traversal over a graph.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:cope.Graphs.DepthFirstWalker`2.#ctor(cope.Graphs.IGraph{`0,`1},`0,System.Boolean)">
            <summary>
            Constructs a new walker given a graph to operate on and a start node.
            </summary>
            <param name="graph"></param>
            <param name="start">The node to start the enumeration at.</param>
            <param name="includeStartNode">If set to true, the enumerator will output the start node as the first item.</param>
        </member>
        <member name="P:cope.Graphs.DepthFirstWalker`2.Graph">
            <summary>
            Gets the graph this walker is operating on.
            </summary>
        </member>
        <member name="P:cope.Graphs.DepthFirstWalker`2.StartNode">
            <summary>
            Gets the starting node for this walker.
            </summary>
        </member>
        <member name="P:cope.Graphs.DepthFirstWalker`2.IncludeStartNode">
            <summary>
            Gets whether or not the starting node will be part of the enumeration.
            </summary>
        </member>
        <member name="T:cope.Graphs.Graph">
            <summary>
            Class representing an unweigthed directed graph.
            </summary>
        </member>
        <member name="M:cope.Graphs.Graph.#ctor(cope.Graphs.IGraph{System.Int32,System.Int32})">
            <summary>
            Copy constructor.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:cope.Graphs.Graph.GetWeight(System.Int32,System.Int32)">
            <summary>
            Returns the weight of an edge or -1 if the edge does not exist.
            As this graph is unweighted, the weight is always 1f.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.Graph.SetWeight(System.Int32,System.Int32,System.Single)">
            <summary>
            Not supported by this Graph class as it is unweighted. It won't do anything.
            As this graph is unweigthed, this method will always return false.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
        </member>
        <member name="M:cope.Graphs.Graph.AddEdge(System.Int32,System.Int32,System.Single)">
            <summary>
            Adds an edge to the graph. As this graph is unweighted, the weight parameter will be ignored.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Graphs.GraphExt">
            <summary>
            Provides extension methods for the IGraph-interface.
            </summary>
        </member>
        <member name="M:cope.Graphs.GraphExt.AddNodeWithEdges``2(cope.Graphs.IGraph{``0,``1},``0[])">
            <summary>
            Adds a node to the graph and adds edges from the node to the specified target nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="toNodeIds">The nodes to add edges to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.AddNodeWithEdges``2(cope.Graphs.IGraph{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a node to the graph and adds edges from the node to the specified target nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="toNodeIds">IEnumerable of the nodes to add edges to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.AddEdge``2(cope.Graphs.IGraph{``0,``1},``0,``0[])">
            <summary>
            Takes a source node and a collection of target nodes and constructs edges from the source to the target nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="fromNodeId">The source node.</param>
            <param name="toNodeIds">The target nodes.</param>
        </member>
        <member name="M:cope.Graphs.GraphExt.AddEdge``2(cope.Graphs.IGraph{``0,``1},``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Takes a source node and a collection of target nodes and constructs edges from the source to the target nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="fromNodeId">The source node.</param>
            <param name="toNodeIds">The target nodes.</param>
        </member>
        <member name="M:cope.Graphs.GraphExt.RemoveEdge``2(cope.Graphs.IGraph{``0,``1},``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Takes a source node and a collection of target nodes and removs all edges from the source to the target nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="fromNodeId">The source node.</param>
            <param name="toNodeIds">The target nodes.</param>
        </member>
        <member name="M:cope.Graphs.GraphExt.GetNeighbors``2(cope.Graphs.IGraph{``0,``1},``0)">
            <summary>
            Returns all neighbors of a given node. Each cell this cell has a edge to is considered a neighbor.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.GetAllEdges``2(cope.Graphs.IGraph{``0,``1})">
            <summary>
            Returns alls edges of the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.GetAllWeightedEdges``2(cope.Graphs.IGraph{``0,``1})">
            <summary>
            Returns alls edges (including their weight) of the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.IsRegular``2(cope.Graphs.IGraph{``0,``1})">
            <summary>
            Returns whether or not the graph is regular.
            A regular graph has the same degree of edges on every node.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.ShortestPath``2(cope.Graphs.IGraph{``0,``1},``0,``0)">
            <summary>
            Returns the shortest path between the two specified nodes using Dijkstra's algorithm.
            If there is no path connecting the two nodes, the function will return null.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.ShortestPath``2(cope.Graphs.IGraph{``0,``1},System.Collections.Generic.Dictionary{``0,cope.MutableTuple{System.Single,``1}},``0,``0)">
            <summary>
            Returns the shortest path between the two specified nodes using the output of Dijkstra's algorithm.
            If there is no path connecting the two nodes, the function will return null.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="dijkstraMap">The Dijkstra map is the output of Dijkstra's algorithm: It's a dictionary indexed by the nodes which stores both the distance of
            and the edge leading to the node for every reachable node of the graph.</param>
            <param name="from">The node Dijkstra's algorithm started with. This is required in order to determine where a path needs to start.</param>
            <param name="to">The node to find a path to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.Dijkstra``2(cope.Graphs.IGraph{``0,``1},``0)">
            <summary>
            Runs Dijkstra's algorithm on the graph for the given starting node. It returns a dictionary containing information about the graph:
            It is indexed by the nodes and for each node it contains a Tuple consisting of the distance to the node and the edge leading to the node.
            Using this information, a path to every reachable node can be rebuild. If a node is not part of the dictionary, then it is not reachable
            from the specified starting node.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="from">The node to start Dijkstra's algorithm with.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.Floyd``2(cope.Graphs.IGraph{``0,``1})">
            <summary>
            Implements Floyd's algorithm which calculates the shortest path for each pair of nodes.
            It returns a dictionary keyed by NodeCombinations which contains the length of the shortest paths.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.Diameter``2(cope.Graphs.IGraph{``0,``1})">
            <summary>
            Calculates the diameter of this graph. The diameter is the maximum length of the shortest paths connecting each pair of nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.Diameter``2(cope.Graphs.IGraph{``0,``1},System.Collections.Generic.Dictionary{cope.Graphs.NodeCombination{``0},System.Single})">
            <summary>
            Calculates the diameter of this graph. The diameter is the maximum length of the shortest paths connecting each pair of nodes.
            Takes a Floyd Map as input which is a Dictionary mapping NodeCombinations onto their length.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="floydMap"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.ClusteringCoefficient``2(cope.Graphs.IGraph{``0,``1})">
            <summary>
            Returns the global clustering coefficient of the graph which is the average of all local clustering coefficients.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.LocalClusteringCoefficient``2(cope.Graphs.IGraph{``0,``1},``0)">
            <summary>
            Calculates the local clustering coefficient for a given node.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.AveragePathLength``2(cope.Graphs.IGraph{``0,``1})">
            <summary>
            Calculates the average path length of this graph by using Floyd's algorithm.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.GraphExt.AveragePathLength``2(cope.Graphs.IGraph{``0,``1},System.Collections.Generic.Dictionary{cope.Graphs.NodeCombination{``0},System.Single})">
            <summary>
            Calculates the average path length of this graph. Takes a Floyd map as a parameter. A Floyd map maps NodeCombination onto the length of the path between them.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="floydMap"></param>
            <returns></returns>
        </member>
        <member name="P:cope.Graphs.IGraph`2.IsDirected">
            <summary>
            Gets whether the graph is directed.
            </summary>
        </member>
        <member name="P:cope.Graphs.IGraph`2.InvalidNodeId">
            <summary>
            Gets the Id denoting an invalid node.
            </summary>
        </member>
        <member name="P:cope.Graphs.IGraph`2.InvalidEdgeId">
            <summary>
            Gets the Id doniting an invalid edge.
            </summary>
        </member>
        <member name="M:cope.Graphs.IGraph`2.AddNode">
            <summary>
            Adds a node to the graph and returns the node's id or -1 if it failed.
            </summary>
            <returns>Returns the new node's Id or InvalidNodeId if it failed.</returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.HasNode(`0)">
            <summary>
            Returns whether a node with the specified node Id exists.
            </summary>
            <param name="nodeId">The node Id to check.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.RemoveNode(`0)">
            <summary>
            Removes the specified node; returns false if there is no node with the specified Id, otherwise true.
            </summary>
            <param name="nodeId">The Id of the node to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.AddEdge(`0,`0)">
            <summary>
            Adds an edge between the two specified nodes to the graph.
            </summary>
            <param name="fromNodeId">The id of the source-node of the edge.</param>
            <param name="toNodeId">The id of the target-node of the edge.</param>
        </member>
        <member name="M:cope.Graphs.IGraph`2.AddEdge(`0,`0,System.Single)">
            <summary>
            Adds an edge with a specified weight between the two specified nodes to the graph.
            </summary>
            <param name="fromNodeId">The id of the source-node of the edge.</param>
            <param name="toNodeId">The id of the target-node of the edge.</param>
            <param name="weight">The weight of the edge.</param>
        </member>
        <member name="M:cope.Graphs.IGraph`2.HasEdge(`0,`0)">
            <summary>
            Returns whether an edge exists between the two specified nodes.
            </summary>
            <param name="fromNodeId">The id of the source-node of the edge.</param>
            <param name="toNodeId">The id of the target-node of the edge.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.RemoveEdge(`0,`0)">
            <summary>
            Removes the edge between the two specified nodes. Returns true if there was a an edge connecting the nodes.
            </summary>
            <param name="fromNodeId">The id of the source-node of the edge.</param>
            <param name="toNodeId">The id of the target-node of the edge.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.RemoveEdge(`1)">
            <summary>
            Removes the specifed edge. Returns true if there was a an edge connecting the nodes.
            </summary>
            <param name="edgeId">The edge to remove.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetEdge(`0,`0)">
            <summary>
            Returns the edge between the specified nodes.
            </summary>
            <param name="fromNodeId">The id of the source-node of the edge.</param>
            <param name="toNodeId">The id of the target-node of the edge.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetWeight(`0,`0)">
            <summary>
            Returns the weight of the edge between the two specified nodes.
            </summary>
            <param name="fromNodeId">The id of the source-node of the edge.</param>
            <param name="toNodeId">The id of the target-node of the edge.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetWeight(`1)">
            <summary>
            Returns the weight of the specified node.
            </summary>
            <param name="edgeId">The id of the edge to get the weight of.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.SetWeight(`0,`0,System.Single)">
            <summary>
            Sets the weight of the edge between the two specified nodes. Returns whether or not the operation succeeded (as it may fail if there is no such edge).
            </summary>
            <param name="fromNodeId">The id of the source-node of the edge.</param>
            <param name="toNodeId">The id of the target-node of the edge.</param>
            <param name="weight">The new weight of the edge.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.SetWeight(`1,System.Single)">
            <summary>
            Sets the weight of the edge with the given id. Returns whether or not the operation succeeded (as it may fail if there is no such edge).
            </summary>
            <param name="edgeId">The id of the edge to set the weight of.</param>
            <param name="weight">The new weight of the edge.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetEdgesFromNode(`0)">
            <summary>
            Gets the ids of all nodes the specified node has an edge to.
            </summary>
            <param name="fromNodeId">The node id to get edges from.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetEdgesToNode(`0)">
            <summary>
            Gets the ids of all nodes that have an edge to the specified node.
            </summary>
            <param name="toNodeId">The node id to get edges to.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetAllNodes">
            <summary>
            Returns all node ids in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetEdgeTarget(`1)">
            <summary>
            Returns the target of an edge.
            </summary>
            <param name="edge">The edge to get the target of.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetEdgeOrigin(`1)">
            <summary>
            Returns the origin of an edge.
            </summary>
            <param name="edge">The edge to get the target of.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetNumNodes">
            <summary>
            Returns the number of nodes in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.GetNumEdges">
            <summary>
            Returns the number of edges in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.IGraph`2.IsValidWeight(System.Single)">
            <summary>
            Returns whether or not the specified weight is considered valid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:cope.Graphs.RandomGraph">
            <summary>
            Static helper class for creating random graphs.
            </summary>
        </member>
        <member name="M:cope.Graphs.RandomGraph.ErdosRenyiModel``2(cope.Graphs.IGraph{``0,``1},System.Int32,System.Double,System.Random)">
            <summary>
            Generates a graph with a random set of nodes. The Erdos-Renyi model uses two parameters, one to determine the number of nodes in the graph
            and another representing the probability for two nodes to be connected.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph">The graph to operate on. The function assumes that the graph does not yet contain any nodes or edges.</param>
            <param name="n">The number of nodes the graph will have.</param>
            <param name="p">The probability that two nodes are connected.</param>
            <param name="rng">Custom random number generator for the proability. If this is null, a new rng will be created.</param>
        </member>
        <member name="M:cope.Graphs.RandomGraph.AddRandomEdges``2(cope.Graphs.IGraph{``0,``1},System.Double,System.Random)">
            <summary>
            Adds a bunch of random edges to a graph assuming it already has nodes in it. This function assumes that the graph does not yet have any edges.
            The generation of edges is controlled given a single parameter which defines the probability of two nodes being connected by an edge.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph">The graph to operate on.</param>
            <param name="p">The probability that two nodes are connected.</param>
            <param name="rng">Custom random number generator for the proability. If this is null, a new rng will be created.</param>
        </member>
        <member name="T:cope.Graphs.UndirectedGraph">
            <summary>
            Class representing an unweigthed undirected graph.
            </summary>
        </member>
        <member name="M:cope.Graphs.UndirectedGraph.#ctor">
            <summary>
            Constructs an empty graph.
            </summary>
        </member>
        <member name="M:cope.Graphs.UndirectedGraph.#ctor(cope.Graphs.IGraph{System.Int32,System.Int32})">
            <summary>
            Copy constructor.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:cope.Graphs.UndirectedGraph.AddEdge(System.Int32,System.Int32,System.Single)">
            <summary>
            Adds an edge to the graph, ignoring the weight parameter.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.UndirectedGraph.GetWeight(System.Int32,System.Int32)">
            <summary>
            Returns the weight of the edge between the two specified nodes or -1 if there is no edge.
            As this graph is unweigthed it will return 1 for every edge.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.UndirectedGraph.SetWeight(System.Int32,System.Int32,System.Single)">
            <summary>
            Not supported for this kind of graph. It won't do anything at all.
            As SetWeight shall return whether or not the operation succeeded, it will always return false.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
        </member>
        <member name="T:cope.Graphs.WeightedAdjacencyMatrixGraph">
            <summary>
            Represents a weighted, possibly directed adjacency matrix graph.
            In this implementation an adjacency matrix based graph has a fixed number of nodes which are all created when the graph is created;
            </summary>
        </member>
        <member name="F:cope.Graphs.WeightedAdjacencyMatrixGraph.m_adjacencyMatrix">
            <summary>
            Square-array indexed by nodes.
            [1,2] = Edge from 1 to 2
            If the value of [x,y] == float.NaN, then there's no edge between the two nodes.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.#ctor(System.Boolean,System.Int32)">
            <summary>
            Constructs a new adjacency matrx graph with memory allocated for the specified number of nodes.
            You cannot change the number of nodes after constructing the graph.
            </summary>
            <param name="isDirected"></param>
            <param name="numNodes"></param>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.#ctor(cope.Graphs.IGraph{System.Int32,System.Int32})">
            <summary>
            Copy constructor.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="P:cope.Graphs.WeightedAdjacencyMatrixGraph.IsDirected">
            <summary>
            Gets whether or not this graph is directed.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.AddNode">
            <summary>
            Not supported by adjacency graphs! Will throw an exception.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">AdjacencyMatrixGraphs don't support adding any more nodes than the number set at creation time.</exception>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.HasNode(System.Int32)">
            <summary>
            Returns whether or not there is a node with the specified id.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.RemoveNode(System.Int32)">
            <summary>
            Not supported by adjacency matrix graphs! Will throw an exception.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">AdjacencyMatrixGraphs don't support removing nodes.</exception>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.AddEdge(System.Int32,System.Int32)">
            <summary>
            Adds an edge between the two specified nodes and returns the id of the newly created edge. If there already is an edge between the two nodes,
            it will return the id of that edge. If one of the given node Ids is invalid, it will return InvalidEdgeId.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.HasEdge(System.Int32,System.Int32)">
            <summary>
            Returns whether or not this an edge exists between the two specified nodes.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.RemoveEdge(System.Int32,System.Int32)">
            <summary>
            Removes the edge between the two specified nodes. Returns true if an edge existed between the two nodes.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.RemoveEdge(System.Int32)">
            <summary>
            Removes the specified edge. Returns true if an edge existed between the two nodes.
            </summary>
            <param name="edgeId"></param>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetEdge(System.Int32,System.Int32)">
            <summary>
            Returns the id of the edge connecting the two specified nodes or InvalidEdgeId if there is no such edge.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.SetWeight(System.Int32,System.Single)">
            <summary>
            Sets the weight of an edge.
            Returns whether or not the operation succeeded (as it may fail if there is no such edge or if the weight is not valid).
            </summary>
            <param name="edgeId"></param>
            <param name="weight"></param>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetEdgesFromNode(System.Int32)">
            <summary>
            Returns the ids of all edges that start at a specified node. Returns null if the specified node does not exist.
            </summary>
            <param name="fromNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetEdgesToNode(System.Int32)">
            <summary>
            Returns the ids of all edges that end at a specified node. Returns null if the specified node does not exist.
            </summary>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetAllNodes">
            <summary>
            Returns the ids of all nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetEdgeTarget(System.Int32)">
            <summary>
            Returns the id of the target node of the specified edge.
            Returns InvalidNodeId if there is no such edge.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetEdgeOrigin(System.Int32)">
            <summary>
            Returns the id of the origion/source node of the specified edge.
            Returns InvalidNodeId if there is no such edge.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetNumNodes">
            <summary>
            Returns the number of nodes in this graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetNumEdges">
            <summary>
            Returns the number of edges in this graph.
            </summary>
            <returns></returns>
        </member>
        <member name="P:cope.Graphs.WeightedAdjacencyMatrixGraph.InvalidNodeId">
            <summary>
            Gets the id representing an invalid node.
            </summary>
        </member>
        <member name="P:cope.Graphs.WeightedAdjacencyMatrixGraph.InvalidEdgeId">
            <summary>
            Gets the id representing an invalid edge.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.AddEdge(System.Int32,System.Int32,System.Single)">
            <summary>
            Adds an edge to the graph, connecting the two specified nodes. The edge will have the specified weight.
            Returns the id of the new edge or InvalidEdgeId if one of the node ids was invalid or if the given weight is invalid.
            If there already is an edge connecting the two nodes, that edge's weight will be set and its id returned.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetWeight(System.Int32,System.Int32)">
            <summary>
            Returns the weight of an Edge. If there is no such edge, it will return float.NaN.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.GetWeight(System.Int32)">
            <summary>
            Returns the weight of the edge with the given id or float.NaN if there is no such weight.
            </summary>
            <param name="edgeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.SetWeight(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the weight of the edge connecting the two specified nodes.
            Returns whether or not the operation succeeded (as it may fail if there is no such edge or if the weight is not valid).
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedAdjacencyMatrixGraph.IsValidWeight(System.Single)">
            <summary>
            Returns whether or not the specified weight is considered a valid weight.
            </summary>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Graphs.WeightedGraph">
            <summary>
            Represents a weighted graph.
            </summary>
        </member>
        <member name="F:cope.Graphs.WeightedGraph.m_edges">
            <summary>
            In the undirected case, the same edge is used for both directions.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.#ctor">
            <summary>
            Constructs a new directed graph which.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.#ctor(cope.Graphs.IGraph{System.Int32,System.Int32})">
            <summary>
            Copy constructor. Does not like undirected graphs.
            </summary>
            <param name="graph"></param>
            <exception cref="T:System.Exception">Can't copy an undirected grap!</exception>
        </member>
        <member name="P:cope.Graphs.WeightedGraph.IsDirected">
            <summary>
            Gets whether or not this graph is directed.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.AddNode">
            <summary>
            Adds a node to the graph and returns the id of the newly created node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.HasNode(System.Int32)">
            <summary>
            Returns whether or not there is a node with the specified id.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.RemoveNode(System.Int32)">
            <summary>
            Removes the node with the given id and returns whether or not there was such a node.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.AddEdge(System.Int32,System.Int32)">
            <summary>
            Adds an edge to the graph connecting the two specified nodes and returns the id of the newly created edge.
            If there already is such an edge, it will return the id of that edge.
            If one of the specified nodes does not exist, it will return InvalidEdgeId.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.HasEdge(System.Int32,System.Int32)">
            <summary>
            Returns whether or not there is an edge connecting the two specified nodes.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.RemoveEdge(System.Int32,System.Int32)">
            <summary>
            Removes the edge connecting the two specified nodes and returns whether or not such an edge existed.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.RemoveEdge(System.Int32)">
            <summary>
            Removes the edge with the specified id from the graph and returns whether or not such an edge existed.
            </summary>
            <param name="edgeIdId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetEdge(System.Int32,System.Int32)">
            <summary>
            Returns the edge connecting the two specified nodes or InvalidEdgeId if there is no such edge.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.SetWeight(System.Int32,System.Single)">
            <summary>
            Sets the weight of the specified edge to the specified weight. Returns whether or not the operation succeeded.
            </summary>
            <param name="edgeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetEdgesFromNode(System.Int32)">
            <summary>
            Returns all the id of all edges originating from a given Node. If there is no such node, it will return null.
            </summary>
            <param name="fromNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetEdgesToNode(System.Int32)">
            <summary>
            Returns the ids of all edges ending at the specified node. If there is no such node, it will return null.
            </summary>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetAllNodes">
            <summary>
            Returns all node ids.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetEdgeTarget(System.Int32)">
            <summary>
            Returns the target node of the specified edge or InvalidNodeId if there is no such edge.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetEdgeOrigin(System.Int32)">
            <summary>
            Returns the origin/source node of the specified edge of InvalidNodeId if there is no such edge.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetNumNodes">
            <summary>
            Returns the number of nodes in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetNumEdges">
            <summary>
            Returns the number of edges in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.IsValidWeight(System.Single)">
            <summary>
            Returns whether or not a specified weight is considered valid.
            </summary>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="P:cope.Graphs.WeightedGraph.InvalidNodeId">
            <summary>
            Gets the id representing an invalid node.
            </summary>
        </member>
        <member name="P:cope.Graphs.WeightedGraph.InvalidEdgeId">
            <summary>
            Gets the id representing an invalid edge.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.AddEdge(System.Int32,System.Int32,System.Single)">
            <summary>
            Adds an edge to the graph connecting the two specified nodes and returns the id of the newly created edge.
            Returns InvalidEdgeId if one of the specified nodes was invalid or if the weight was invalid.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetWeight(System.Int32,System.Int32)">
            <summary>
            Returns the weight of the edge connecting the two specified edges.
            If there is no such edge, it will return float.NaN, which is an invalid weight.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.GetWeight(System.Int32)">
            <summary>
            Returns the weight of the specified edge. If there is no such edge, it will return float.NaN, which is an invalid weight.
            </summary>
            <param name="edgeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedGraph.SetWeight(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the weight of the edge connecting the two specified edges. Returns whether or not the operation succeeded.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Graphs.WeightedUndirectedGraph">
            <summary>
            Represents an undirected weighted Graph.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.#ctor">
            <summary>
            Constructs an empty graph.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.#ctor(cope.Graphs.IGraph{System.Int32,System.Int32})">
            <summary>
            Copy constructor. Will throw an exception if the graph to copy is directed.
            </summary>
            <param name="graph"></param>
            <exception cref="T:System.Exception">Cannot copy a directed graph!</exception>
        </member>
        <member name="P:cope.Graphs.WeightedUndirectedGraph.IsDirected">
            <summary>
            Gets whether or not this graph is directed. In this case it will always return false.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.AddNode">
            <summary>
            Adds a node to the graph and returns the id of the newly created node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.HasNode(System.Int32)">
            <summary>
            Returns whether or not there is a node with the specified id.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.RemoveNode(System.Int32)">
            <summary>
            Removes the node with the specified id from the graph.
            Returns whether or not there was such a node.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.AddEdge(System.Int32,System.Int32)">
            <summary>
            Adds an edge to the graph. Returns the id of the newly created edge.
            If there already is such an edge, it returns the id of that edge.
            If one of the specified nodes does not exist, it will return InvalidEdgeId.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.HasEdge(System.Int32,System.Int32)">
            <summary>
            Returns whether or not there is an edge connecting the two specified nodes.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.RemoveEdge(System.Int32,System.Int32)">
            <summary>
            Removes the edge connecting the two specified nodes.
            Returns whether or not there was such an edge.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.RemoveEdge(System.Int32)">
            <summary>
            Removes the edge with the given id.
            Returns whether or not there was such an edge.
            </summary>
            <param name="edgeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetEdge(System.Int32,System.Int32)">
            <summary>
            Returns the id of the edge between the two specified nodes.
            If there is no such edge, it will return InvalidEdgeId.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.SetWeight(System.Int32,System.Single)">
            <summary>
            Sets the weight of the specified edge.
            Returns whether or not the operation succeeded (as it may fail if there is no such edge or if the weight is not valid).
            </summary>
            <param name="edgeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetEdgesFromNode(System.Int32)">
            <summary>
            Returns all edges originating from the specified node.
            If the specified node does not exist, it return null.
            </summary>
            <param name="fromNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetEdgesToNode(System.Int32)">
            <summary>
            Returns all edges ending at the specified node.
            If the specified node does not exist, it returns null.
            </summary>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetAllNodes">
            <summary>
            Returns the ids of all nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetEdgeTarget(System.Int32)">
            <summary>
            Returns the target node of the specified edge or InvalidNodeId if there is no such edge.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetEdgeOrigin(System.Int32)">
            <summary>
            Returns the origin/source node of the specified edge or InvalidNodeId if there is no such edge.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetNumNodes">
            <summary>
            Returns the number of nodes in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetNumEdges">
            <summary>
            Returns the total number of edges in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.IsValidWeight(System.Single)">
            <summary>
            Returns whether or not a specified weight is considered valid.
            </summary>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="P:cope.Graphs.WeightedUndirectedGraph.InvalidNodeId">
            <summary>
            Gets the id representing an invalid node.
            </summary>
        </member>
        <member name="P:cope.Graphs.WeightedUndirectedGraph.InvalidEdgeId">
            <summary>
            Gets the id representing an invalid edge.
            </summary>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.AddEdge(System.Int32,System.Int32,System.Single)">
            <summary>
            Adds an edge to the graph and returns the id of the newly created edge.
            If there already is an edge connecting the two specified node, that edge's weight will be set to the specified value and its id will be returned
            Returns InvalidEdgeId if one of the specified nodes does not exist or if the weight is invalid.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetWeight(System.Int32,System.Int32)">
            <summary>
            Returns the weight of the edge connecting the two specified nodes.
            If there is no such edge, it will return float.NaN, which is an invalid weight.
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.GetWeight(System.Int32)">
            <summary>
            Returns the weight of the specified edge. If there is no such edge, it will return float.NaN.
            </summary>
            <param name="edgeId"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Graphs.WeightedUndirectedGraph.SetWeight(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the weight of the edge between the two specified nodes.
            Returns whether or not the operation succeeded (as it may fail if there is no such edge).
            </summary>
            <param name="fromNodeId"></param>
            <param name="toNodeId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="T:cope.HeapSort">
            <summary>
            Static helper class which offers sorting of IEnumerables using HeapSort.
            </summary>
        </member>
        <member name="M:cope.HeapSort.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Sorts items using the specified function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:cope.HeapSort.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts items using the specified IComparer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:cope.HeapSort.Sort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sorts items which implement the generic IComparable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:cope.HeapSort.SortHeap``1(cope.DelegateHeap{``0})">
            <summary>
            Sorts values from a heap. The heap will be destroyed by this operation!
            </summary>
            <typeparam name="T"></typeparam>
            <param name="heap"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Heap`1">
            <summary>
            Implements a heap which will only work for types which implement the generic IComparable.
            If you want to use a custom IComparer, use CustomHeap.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:cope.ArrayPool`1">
            <summary>
            Implements pooling for arrays.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:cope.CircularArray`1">
            <summary>
            Represents a circular array.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:cope.CircularArray`1.#ctor(System.Int32)">
            <summary>
            Creates a new CircularArray of the specified size.
            </summary>
            <param name="size">Size of the array.</param>
        </member>
        <member name="M:cope.CircularArray`1.#ctor(`0[])">
            <summary>
            Creates a new CircularArray based on the specified array. The specified array will NOT be copied.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:cope.CircularArray`1.GetNext">
            <summary>
            Returns the next element from the CircularArray.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.CircularArray`1.SetIterationIndex(System.Int32)">
            <summary>
            Sets the current iteration index used by GetNext().
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:cope.CircularArray`1.GetValues(System.Int32,System.Int32)">
            <summary>
            Returns 'length' values starting from index.
            </summary>
            <param name="index"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:cope.CircularArray`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies 'length' values from this array to 'target' starting at 'index'.
            </summary>
            <param name="target"></param>
            <param name="length"></param>
            <param name="index"></param>
        </member>
        <member name="P:cope.CircularArray`1.Length">
            <summary>
            Gets the length of the circular buffer.
            </summary>
        </member>
        <member name="P:cope.CircularArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index modulo array length.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:cope.DataPool`1">
            <summary>
            Implements pooling for data.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:cope.ByteArrayConverter">
            <summary>
            Static class offering extensions for conversions involving byte[];
            </summary>
        </member>
        <member name="M:cope.ByteArrayConverter.ToByteArray(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Converts a string to byte[].
            </summary>
            <param name="str">String to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII enconding instead of Unicode.</param>
            <param name="index">Index of the first char in the string to convert (zero-based).</param>
            <param name="length">Number of chars to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToByteArray(System.String,System.Boolean,System.Int32)">
            <summary>
            Converts a string to byte[].
            </summary>
            <param name="str">String to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII enconding instead of Unicode.</param>
            <param name="length">Number of chars to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToByteArray(System.String,System.Boolean)">
            <summary>
            Converts a string to byte[].
            </summary>
            <param name="str">String to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII enconding instead of Unicode.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToByteArray(System.Text.StringBuilder,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Converts a StringBuilder to byte[].
            </summary>
            <param name="str">String to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <param name="index">Index of the first char in the string to convert (zero-based).</param>
            <param name="length">Number of chars to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToByteArray(System.Text.StringBuilder,System.Boolean,System.Int32)">
            <summary>
            Converts a StringBuilder to byte[].
            </summary>
            <param name="str">String to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <param name="length">Number of chars to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToByteArray(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Converts a StringBuilder to byte[].
            </summary>
            <param name="str">String to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToByteArray(System.Char[],System.Int32,System.Int32)">
            <summary>
            Converts a char[] to byte[].
            </summary>
            <param name="ca">Char[] to convert.</param>
            <param name="index">Index in ca from which to start conversion.</param>
            <param name="length">Number of chars to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToByteArray(System.Char[],System.Int32)">
            <summary>
            Converts a char[] to byte[].
            </summary>
            <param name="ca">Char[] to convert.</param>
            <param name="length">Number of chars to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToByteArray(System.Char[])">
            <summary>
            Converts a char[] to byte[].
            </summary>
            <param name="ca">Char[] to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToString(System.Byte[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Converts a byte[] to a string.
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <param name="index">Index of the first byte in the array to convert (zero-based).</param>
            <param name="length">Number of bytes to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToString(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Converts a byte[] to a string.
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <param name="length">Number of bytes to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToString(System.Byte[],System.Boolean)">
            <summary>
            Converts a byte[] to a string.
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToStringBuilder(System.Byte[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Converts a byte[] to a StringBuilder.
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <param name="index">Index of the first byte in the array to convert (zero-based).</param>
            <param name="length">Number of bytes to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToStringBuilder(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Converts a byte[] to a StringBuilder.
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <param name="length">Number of bytes to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToStringBuilder(System.Byte[],System.Boolean)">
            <summary>
            Converts a byte[] to a StringBuilder.
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToStringBuilder(System.Byte[])">
            <summary>
            Converts a byte[] to a StringBuilder using Unicode encoding.
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToCharArray(System.Byte[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Converts a byte[] to a char[].
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <param name="index">Index of the first byte in the array to convert (zero-based).</param>
            <param name="length">Number of bytes to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToCharArray(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Converts a byte[] to a char[].
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <param name="length">Number of bytes to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToCharArray(System.Byte[],System.Boolean)">
            <summary>
            Converts a byte[] to a char[].
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <param name="asciiEncoding">Set to true to use ASCII encoding instead of Unicode.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToCharArray(System.Byte[])">
            <summary>
            Converts a byte[] to a char[].
            </summary>
            <param name="bytes">Byte[] to convert.</param>
            <returns></returns>
        </member>
        <member name="M:cope.ByteArrayConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns the UInt32 represented by the first 4 bytes of this byte array.
            </summary>
            <param name="bytes"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="T:cope.CharType">
            <summary>
            Different CharTypes used to check if a char fulfills certain specifications.
            </summary>
        </member>
        <member name="F:cope.CharType.Ascii">
            <summary>
            Contains all 7bit Ascii characters.
            </summary>
        </member>
        <member name="T:cope.CharTypeChecker.IsOfCharType">
            <summary>
            Delegate that Checks if a Char fulfills certain specifications.
            </summary>
            <param name="c">Char to check</param>
            <returns></returns>
        </member>
        <member name="F:cope.CharTypeChecker.s_charTypeCheckers">
            <summary>
            Array collecting the checking functions for different CharTypes; needs to be in the same order as CharType.
            </summary>
        </member>
        <member name="M:cope.CharTypeChecker.GetCharTypeChecker(cope.CharType)">
            <summary>
            Returns the Checker for a given CharType.
            </summary>
            <param name="ct">CharType to get the checker for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.CharTypeChecker.IsCharOfType(System.Char,cope.CharType)">
            <summary>
            Checks if the given char is of a certain CharType.
            </summary>
            <param name="c">Char to check.</param>
            <param name="t">CharType to check for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.CharTypeChecker.IsCharOfType(System.Char,cope.CharType[])">
            <summary>
            Checks if the given char is of any of the given CharTypes.
            </summary>
            <param name="c">Char to check.</param>
            <param name="ts">CharTypes to check for.</param>
            <returns></returns>
        </member>
        <member name="M:cope.CharTypeChecker.IsAscii(System.Char)">
            <summary>
            Checks whether or not the char c is representable in 7bit Ascii.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:cope.CharTypeChecker.IsVowel(System.Char)">
            <summary>
            Checks if char c is a vowel.
            </summary>
            <param name="c">Char to check.</param>
            <returns></returns>
        </member>
        <member name="M:cope.CharTypeChecker.IsConsonant(System.Char)">
            <summary>
            Checks if char c is a consonant.
            </summary>
            <param name="c">Char to check.</param>
            <returns></returns>
        </member>
        <member name="M:cope.CharTypeChecker.IsUmlaut(System.Char)">
            <summary>
            Checks if char c is an Umlaut.
            </summary>
            <param name="c">Char to check.</param>
            <returns></returns>
        </member>
        <member name="M:cope.CharTypeChecker.IsIllegalInFilename(System.Char)">
            <summary>
            Checks whether the specified char is legal in a Windows file-/foldername.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:cope.CharTypeChecker.IsIllegalInPath(System.Char)">
            <summary>
            Checks whether the specified char is legal in a Windows file-/folderpath.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:cope.GeneratorEnumerator`2">
            <summary>
            Enumerator which uses a generator function which takes a state, modifies it and returns an output.
            In each step of the enumeration the generator function will be called with the state produced by the previous
            application of the generator function. The first state is passed as an argument to the ctor.
            </summary>
            <typeparam name="TState"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="M:cope.GeneratorEnumerator`2.Reset">
            <exception cref="T:System.InvalidOperationException">Not available for objects of type GeneratorEnumerator.</exception>
        </member>
        <member name="T:cope.GeneratorStream`2">
            <summary>
            A GeneratorStream takes a generator function which modifies a state and returns an output value.
            This process is wrapped as an IEnumerable so that the Generator is called with the updated state in every step.
            </summary>
            <typeparam name="TState"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="M:cope.GeneratorStream`2.#ctor(cope.GeneratorFunc{`0,`1},`0)">
            <summary>
            Creates a new GeneratorStream using the given generator and initial state.
            </summary>
            <param name="generator"></param>
            <param name="initialState"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator" /> is <c>null</c>.</exception>
        </member>
        <member name="P:cope.GeneratorStream`2.Generator">
            <summary>
            Gets the generator function.
            </summary>
        </member>
        <member name="M:cope.HexString.HexToBinary(System.String)">
            <summary>
            Converts the hexadecimal representation of a number to its binary equivalent.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:cope.ConstantEnumerator`1">
            <summary>
            Enumerator which constantly returns the same element.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:cope.IO.XmlConfigReader">
            <summary>
            Helper class to read XmlConfig
            </summary>
        </member>
        <member name="M:cope.IO.XmlConfigReader.Read(System.IO.Stream)">
            <summary>
            Reads an XmlConfig from the specified stream.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:cope.IO.XmlConfigWriter">
            <summary>
            Helper class to write XmlConfig
            </summary>
        </member>
        <member name="M:cope.IO.XmlConfigWriter.Write(cope.IO.XmlConfig,System.IO.Stream)">
            <summary>
            Writes the contents of the specified XmlConfig to the specified stream.
            </summary>
            <param name="xmlcon"></param>
            <param name="str"></param>
        </member>
        <member name="T:cope.IO.BaseConfigValue">
            <summary>
            Abstract base class for all kinds of additional ConfigValues 
            </summary>
        </member>
        <member name="M:cope.IO.BaseConfigValue.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads a value from the specified XmlReader.
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:cope.IO.BaseConfigValue.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes a value to the specified XmlReader.
            </summary>
            <param name="xmlWriter"></param>
        </member>
        <member name="M:cope.IO.BaseConfigValue.ReadInnerXml(System.Xml.XmlReader)">
            <summary>
            Implements the reading of the actual values. The name is already read in ReadXml.
            All this happens inside the node containing the name of the value.
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:cope.IO.BaseConfigValue.WriteInnerXml(System.Xml.XmlWriter)">
            <summary>
            Implements the writing of the actual values. The name and type is already written out in in WriteXml.
            All this happens inside the node containing the name and the type of the value.
            </summary>
            <param name="xmlWriter"></param>
        </member>
        <member name="T:cope.IO.CommonConfigValues">
            <summary>
            Contains serializing fascilities for common data types: bool, DateTime, decimal, double, float, int, long, string.
            This is a helper classed used by XmlConfig.
            </summary>
        </member>
        <member name="M:cope.IO.CommonConfigValues.TryWriteValue(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>
            Tries to write the specified 'value' to the XmlWriter. This will only work for primitive types such as string, bool etc.
            Returns 'true' on success, otherwise 'false'.
            </summary>
            <param name="xmlWriter"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.CommonConfigValues.TryReadValue(System.Xml.XmlReader,System.String,System.Object@)">
            <summary>
            Tries to read a value from the specified XmlReader given a type name. It will only read primitive types such
            as int, string, etc. and return it. Returns false on failure.
            </summary>
            <param name="xmlReader"></param>
            <param name="typeName">One of these: 'bool', 'decimal', 'double', 'float', 'int', 'long', 'string'</param>
            <param name="value">This out parameter will contain the value if the function returns true.</param>
            <returns></returns>
        </member>
        <member name="T:cope.IO.ConfigSection">
            <summary>
            This class represents a section-type ConfigValue for the XmlConfig.
            </summary>
        </member>
        <member name="M:cope.IO.ConfigSection.#cctor">
            <summary>
            Static constructor to be called by the static initializer in ConfigValueFactory.
            </summary>
        </member>
        <member name="M:cope.IO.ConfigSection.ProductionMethod(System.Xml.XmlReader)">
            <summary>
            Static production function to be added as a callback to the static table of production functions in ConfigValueFactory.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.ConfigSection.#ctor(System.String)">
            <summary>
            Creates a new ConfigsSection with a given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:cope.IO.ConfigSection.#ctor(System.Xml.XmlReader)">
            <summary>
            Reads a ConfigSection from the given XmlReader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:cope.IO.ConfigSection.ContainsValue(System.String)">
            <summary>
            Checks whether or not this section contains a value with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.ConfigSection.RemoveValue(System.String)">
            <summary>
            Removse the value with the specified name from this instance of ConfigSection and returns whether or not such a value existed.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.ConfigSection.AddValue(cope.IO.BaseConfigValue)">
            <summary>
            Adds the specified value to the ConfigSection.
            </summary>
            <param name="configValue"></param>
        </member>
        <member name="M:cope.IO.ConfigSection.AddValue(System.String,System.Object)">
            <summary>
            Adds a value to this instance of ConfigSection using the specified name.
            </summary>
            <param name="name"></param>
            <param name="configValue"></param>
        </member>
        <member name="M:cope.IO.ConfigSection.Clear">
            <summary>
            Removes all entries from this instance of ConfigSection.
            </summary>
        </member>
        <member name="M:cope.IO.ConfigSection.GetValue(System.String)">
            <summary>
            Retrieves a value with a specified name from this instance of ConfigSection.
            May throw exceptions if there is no entry with the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.ConfigSection.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get the config value with the specified name. Returns true if the operation succeeded.
            </summary>
            <param name="name"></param>
            <param name="configValue"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.ConfigSection.WriteInnerXml(System.Xml.XmlWriter)">
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="T:cope.IO.ConfigValueFactory">
            <summary>
            Manages the different types of available BaseConfigValues. These are used by XmlConfig to serialize values.
            </summary>
        </member>
        <member name="T:cope.IO.ConfigValueFactory.Producer">
            <summary>
            A Producer function constructs a BaseConfigValue from a given XmlReader.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.ConfigValueFactory.#cctor">
            <summary>
            This static ctor takes care of registering all ConfigValues in all loaded assemblies.
            Additionally, it registers a callback to the AssemblyLoad-event of the current domain.
            </summary>
        </member>
        <member name="M:cope.IO.ConfigValueFactory.RegisterConfigValues(System.Reflection.Assembly)">
            <summary>
            This method registers all ConfigValues from a specified assembly by calling their static constructor.
            A type's static constructor normally is only invoked when the type is actually being used, but that's too late for our purposes.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:cope.IO.ConfigValueFactory.OnAssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Callback for the AssemblyLoad event of the current Domain. This will take care of registering
            all ConfigValues from newly loaded assemblies.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:cope.IO.ConfigValueFactory.RegisterType(System.String,cope.IO.ConfigValueFactory.Producer)">
            <summary>
            Associates a 'type name' with a production delegate.
            </summary>
            <param name="typeName"></param>
            <param name="producer"></param>
        </member>
        <member name="M:cope.IO.ConfigValueFactory.UnregisterType(System.String)">
            <summary>
            Unregisters the BaseConfigValue with the specified 'typeName'. Returns whether or not a type with the given name was registered.
            </summary>
            <param name="typeName"></param>
        </member>
        <member name="M:cope.IO.ConfigValueFactory.IsTypeRegistered(System.String)">
            <summary>
            Returns whether or not a type with the specified typeName is registered.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.ConfigValueFactory.GetByType(System.String,System.Xml.XmlReader)">
            <summary>
            Constructs a BaseConfigValue given a type name and a XmlReader. This will check the 'type'-attribue of the current
            </summary>
            <param name="typeName"></param>
            <param name="xmlReader"></param>
            <returns></returns>
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="M:cope.IO.ConfigValueFactory.GetFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Reads a BaseConfigValue or a common config value such as an integer from the specified XmlReader.
            Will throw an exception if the 'type'-attribute of the XmlElement it is trying to read is unknown to it.
            Returns the BaseConfigValue / the common config value.
            </summary>
            <param name="xmlReader"></param>
            <returns></returns>
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="F:cope.IO.Printing.CellSizeMode.Absolute">
            <summary>
            The size is given as an absolute value.
            </summary>
        </member>
        <member name="F:cope.IO.Printing.CellSizeMode.Weight">
            <summary>
            The size is given as an priority/weight value.
            </summary>
        </member>
        <member name="P:cope.IO.Printing.IPrintableDocumentElement.Width">
            <summary>
            Gets the width of this IPrintableDocumentElement (only relevant if AutoWidth = false)
            </summary>
        </member>
        <member name="P:cope.IO.Printing.IPrintableDocumentElement.Height">
            <summary>
            Gets the height of this IPrintableDocumentElement (only relevant if AutoHeight = false)
            </summary>
        </member>
        <member name="P:cope.IO.Printing.IPrintableDocumentElement.AutoHeight">
            <summary>
            Gets whether this IPrintableDocumentElement has its own height (=false) or wants an automatically calculated height (=true).
            </summary>
        </member>
        <member name="P:cope.IO.Printing.IPrintableDocumentElement.AutoWidth">
            <summary>
            Gets whether this IPrintableDocumentElement has its own width (=false) or wants an automatically calculated width (=true).
            </summary>
        </member>
        <member name="P:cope.IO.Printing.IPrintableDocumentElement.AvoidPageBreak">
            <summary>
            Tries to palce this element so it is not suffering form a page break right through it.
            </summary>
        </member>
        <member name="M:cope.IO.Printing.IPrintableDocumentElement.Draw(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Draws this object to the specified RectangleF using the given Graphics. Returns true whether or not it finished drawing.
            </summary>
            <param name="rect"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.Printing.IPrintableDocumentElement.MeasureHeight(System.Drawing.Graphics,System.Single)">
            <summary>
            Returns the height of this IPrintableDocumentElement given a specified width.
            </summary>
            <param name="g"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.Printing.IPrintableDocumentElement.Init">
            <summary>
            Called when the printing process begins.
            </summary>
        </member>
        <member name="M:cope.IO.Printing.IPrintableDocumentElement.Finish">
            <summary>
            Called when the printing process has finished.
            </summary>
        </member>
        <member name="M:cope.IO.Printing.PrintableDocument.AddIndependentElement(cope.IO.Printing.IPrintableDocumentElement)">
            <summary>
            Adds the specified IPrintableDocumentElement to the document.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:cope.IO.Printing.PrintableDocument.Append(cope.IO.Printing.IPrintableDocumentElement)">
            <summary>
            Appends the specified IPrintableDocumentElement to the document, so it tries to adjust the position to the other elements.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:cope.IO.Printing.PrintableDocument.Clear">
            <summary>
            Removes all IPrintableDocumentElements from this document.
            </summary>
        </member>
        <member name="M:cope.IO.Printing.PrintableDocument.Remove(cope.IO.Printing.IPrintableDocumentElement)">
            <summary>
            Removes the specified IPrintableDocumentElement from this document.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:cope.IO.Printing.PrintableDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <exception cref="T:cope.CopeException">Can't have a page break in a page header!</exception>
        </member>
        <member name="T:cope.IO.XmlConfig">
            <summary>
            This class represents an XmlConfig which is able to store arbitrary kinds of values given that they
            come with a class inheriting from BaseConfigValue which does all the reading/writing.
            As a special feature, all it's values are returned as dynamics to reduce boiler-plate code.
            </summary>
        </member>
        <member name="M:cope.IO.XmlConfig.#ctor">
            <summary>
            Constructs a new empty XmlConfig.
            </summary>
        </member>
        <member name="M:cope.IO.XmlConfig.ContainsValue(System.String)">
            <summary>
            Checks whether or not this instance of XmlConfig contains a value with a specific name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.XmlConfig.RemoveValue(System.String)">
            <summary>
            Removes a value from this instance of XmlConfig and returns whether or not a value with that name existed in the first place.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.XmlConfig.AddValue(System.String,System.Object)">
            <summary>
            Adds a value to this instance of XmlConfig using the specified name.
            </summary>
            <param name="name"></param>
            <param name="configValue"></param>
        </member>
        <member name="M:cope.IO.XmlConfig.AddValue(cope.IO.BaseConfigValue)">
            <summary>
            Adds a value to this instance of XmlConfig.
            </summary>
            <param name="configValue"></param>
        </member>
        <member name="M:cope.IO.XmlConfig.Clear">
            <summary>
            Removes all values from this instance of XmlConfig.
            </summary>
        </member>
        <member name="M:cope.IO.XmlConfig.GetValue(System.String)">
            <summary>
            Retrieves a value with a specific name from this instance of XmlConfig.
            May throw exceptions if there is no such value.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.XmlConfig.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get a value with the specified name from this instance of XmlConfig. Returns whether or not the operation succeeded.
            </summary>
            <param name="name"></param>
            <param name="configValue"></param>
            <returns></returns>
        </member>
        <member name="M:cope.IO.XmlConfig.Read(System.IO.Stream)">
            <summary>
            Reads the contents of this XmlConfig from a stream, which should of course contain Xml-data.
            </summary>
            <param name="str"></param>
            <exception cref="T:cope.CopeException">Error while reading config file as Xml. See inner exception for details.</exception>
        </member>
        <member name="M:cope.IO.XmlConfig.Write(System.IO.Stream)">
            <summary>
            Writes the contents of this instance of XmlConfig to the specified stream as XML.
            </summary>
            <param name="stream"></param>
            <exception cref="T:cope.CopeException">Error while writing config file as Xml. See inner exception for details.</exception>
        </member>
        <member name="T:cope.KeyedValue">
            <summary>
            Represents a Value with a Key as used in the KeyValueSyntaxParser.
            </summary>
        </member>
        <member name="P:cope.KeyedValue.Key">
            <summary>
            Gets the key of this instance of KeyedValue.
            </summary>
        </member>
        <member name="P:cope.KeyedValue.Type">
            <summary>
            Gets the type of this instance of KeyedValue. Changing the type will clear the value.
            </summary>
        </member>
        <member name="P:cope.KeyedValue.Value">
            <summary>
            Gets or sets the value of this instance of KeyedValue.
            </summary>
            <exception cref="T:cope.CopeException">Thrown when a value is passed which does not fit the KeyValueType in Type.</exception>
        </member>
        <member name="P:cope.KeyedValue.Parent">
            <summary>
            Gets the parent (the KeyValueTable holding this value) of this instance of KeyedValue.
            </summary>
        </member>
        <member name="P:cope.KeyedValue.MetaData">
            <summary>
            Gets or sets MetaData for this instance of KeyedValue.
            </summary>
        </member>
        <member name="P:cope.KeyedValue.AutoComment">
            <summary>
            A string which will automatically be inserted as a comment when this instance of KeyedValue is serialized.
            </summary>
        </member>
        <member name="M:cope.KeyedValue.GetPath">
            <summary>
            Returns the path of this instance of KeyedValue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.KeyedValue.IsOfRightType(System.Object,cope.KeyValueType)">
            <summary>
             Checks whether the specified Data-object is of the specified type.
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:cope.KeyedValue.GetTypeForData(System.Object)">
            <summary>
             Returns the KeyValueType suitable for the specified Data-object.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:cope.KeyedValue.ConvertStringToData(System.String,cope.KeyValueType)">
            <summary>
            Tries to convert the given string to a proper Value-object using the specified KeyValueType. Throws an exception if it fails
            to convert the value or returns null there's no suitable conversion available.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="M:cope.KeyedValue.ConvertStringToType(System.String)">
            <summary>
             Returns the DataType corresponding to/described by the given string.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:cope.KeyedValue.ConvertDataToString(cope.KeyedValue)">
            <summary>
            Converts the value of the specified KeyedValue to its representation as a string.
            </summary>
            <param name="attribValue"></param>
            <returns></returns>
        </member>
        <member name="T:cope.KeyedValueEnumerator">
            <summary>
            Enumerator for KeyedValues. Will traverse whole trees of KeyedValues,
            but as always with enumerators: Don't change the Enumeration while enumerating!
            This implementation follows the principles of DepthFirstSearching.
            </summary>
        </member>
        <member name="M:cope.KeyedValueEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:cope.KeyedValueEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:cope.KeyedValueEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:cope.KeyedValueEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:cope.KeyedValueEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:cope.KeyValueSyntaxParser">
            <summary>
            This class implements a basic parser for a JSON-like-syntax which allows the reprenstation of 
            key-value data in a tree like structure.
            Each key-value pair looks like this: _key_: _value_ ;
            There are several primitive data types: integers, floats, strings, booleans and tables.
            Tables are similar to associative arrays, but they may hold more than one value with the same key.
            Comments are supported, everything after a -- will be interpreted as a comment (until the end of the line).
            There is a possibility to add MetaData, which works similar to comments. MetaData will be carried into the internal representation
            (in contrast to comments). MetaData is started by -$ and closed by $- (optional) and must come right after a value (following the semicolon).
            MetaData may not contain linebreaks.
            
            Examples:
            string: "this is a string";
            float: 1.0f; -- mind the 'f' that indicates the floatingpoint-ness of the value
            int: 1;
            bool: true; -- or false
            table: {
            |    entry1: "value";
            }; 
            
            The parser will ignore all occurences of |. | is totally optional.
            
            </summary>
        </member>
        <member name="M:cope.KeyValueSyntaxParser.Parse(System.String[])">
            <summary>
            Parses a set of lines to a list of KeyedValues.
            </summary>
            <param name="lines"></param>
            <returns></returns>
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="M:cope.KeyValueSyntaxParser.ParseValue(cope.KeyValueSyntaxParser.Lexeme[],System.Int32@)">
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="M:cope.KeyValueSyntaxParser.LexicalAnalysis(System.String)">
            <exception cref="T:cope.CopeException">End of line reached: Missing string delimiter!</exception>
        </member>
        <member name="M:cope.KeyValueSyntaxParser.LexNumber(System.String,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Performs lexical analysis for a number in the given string which begins at the given index.
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <param name="negative"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:cope.KeyValueSyntaxWriter">
            <summary>
            This class allows to convert <c>KeyedValue</c> objects to their string representation in Key-Value-Syntax.
            See <see cref="T:cope.KeyValueSyntaxParser"/> for a description of the Key-Value-Syntax.
            </summary>
        </member>
        <member name="M:cope.KeyValueSyntaxWriter.GetString(cope.KeyedValue,cope.KeyValueSyntaxWriterOptions)">
            <summary>
            Converts the given <c>KeyedValue</c> to its string representation in Key-Value-Syntax. You may specify some options
            via a <c>KeyValueSyntaxWriterOptions</c> object.
            </summary>
            <param name="kv">The value to convert.</param>
            <param name="options"></param>
            <returns>Returns the string representation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kv" /> is <c>null</c>.</exception>
            <exception cref="T:cope.CopeException">Trying to get string representation of an KeyedValue with an invalid type.</exception>
        </member>
        <member name="M:cope.KeyValueSyntaxWriter.GetStrings(System.Collections.Generic.IEnumerable{cope.KeyedValue},cope.KeyValueSyntaxWriterOptions)">
            <summary>
            Converts the given IEnumerable of <c>KeyedValue</c> to its string representation in Key-Value-Syntax. You may specify some options
            via a <c>KeyValueSyntaxWriterOptions</c> object.
            </summary>
            <param name="kvs">The value to convert.</param>
            <param name="options"></param>
            <returns>Returns the string representation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kvs" /> is <c>null</c>.</exception>
            <exception cref="T:cope.CopeException">Trying to get string representation of an KeyedValue with an invalid type.</exception>
        </member>
        <member name="M:cope.KeyValueSyntaxWriter.GetStringToplevel(cope.KeyedValue)">
            <exception cref="T:cope.CopeException">Trying to get string representation of an KeyedValue with an invalid type.</exception>
        </member>
        <member name="M:cope.KeyValueSyntaxWriter.GetStringIntern(cope.KeyedValue)">
            <exception cref="T:cope.CopeException">Trying to get string representation of an KeyedValue with an invalid type.</exception>
        </member>
        <member name="M:cope.KeyValueSyntaxWriter.GetStringTable(cope.KeyedValue,System.Boolean)">
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="M:cope.KeyValueSyntaxWriter.GetStringOther(cope.KeyedValue)">
            <summary>
            
            </summary>
            <param name="kv"></param>
            <returns></returns>
            <exception cref="T:cope.CopeException">Invalid type in GetStringOther, should never happen.</exception>
        </member>
        <member name="T:cope.KeyValueSyntaxWriterOptions">
            <summary>
            Provides options for the usage of <c>KeyValueSyntaxWriter</c>.
            </summary>
        </member>
        <member name="P:cope.KeyValueSyntaxWriterOptions.IndentWidth">
            <summary>
            Sets the width of the indentation. 0 is no indentation, values less than zero are truncated to 0.
            2 by default.
            </summary>
        </member>
        <member name="P:cope.KeyValueSyntaxWriterOptions.UsePipes">
            <summary>
            Set to false to disable the usage of pipes. True by default.
            </summary>
        </member>
        <member name="P:cope.KeyValueSyntaxWriterOptions.UseTabIndentation">
            <summary>
            Set to true to use tabstops instead of spaces for spacing. False by default.
            </summary>
        </member>
        <member name="P:cope.KeyValueSyntaxWriterOptions.SortEntries">
            <summary>
            Set to true to sort table-entries by key. True by default.
            </summary>
        </member>
        <member name="M:cope.KeyValueTable.RemoveValue(cope.KeyedValue)">
            <summary>
            Removes the specified value from the entries.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:cope.KeyValueTable.RemoveValues(System.String)">
            <summary>
            Removes all values with the given key from the collection.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cope.KeyValueTable.KeyValueTableEnumerator.Reset">
            <exception cref="T:System.InvalidOperationException">Not supported.</exception>
        </member>
        <member name="T:cope.KeyValueType">
            <summary>
            Acceptable types for Values of KeyedValue objects.
            </summary>
        </member>
        <member name="T:cope.KeyValueXmlReader">
            <summary>
            Provides functions to convert XML to <c>KeyedValues</c>.
            </summary>
        </member>
        <member name="M:cope.KeyValueXmlReader.Read(System.String)">
            <summary>
            Tries to open the file at the given path and convert its XML-contents to <c>KeyValue</c> objects.
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exception cref="T:cope.CopeException">Failed to open file to read XML as KeyedValues.</exception>
        </member>
        <member name="M:cope.KeyValueXmlReader.Read(System.IO.Stream)">
            <summary>
            Tries to read XML from the given stream and convert it to <c>KeyValue</c> objects.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:cope.KeyValueXmlReader.ReadData(System.Xml.XmlReader)">
            <summary>
            Tries to read a <c>KeyedValue</c> objects from a given <c>XmlReader</c>.
            </summary>
            <param name="reader"></param>
            <returns></returns>
            <exception cref="T:cope.CopeException">Failed to read KeyedValue from XML. Expected node with name KeyedValues.</exception>
        </member>
        <member name="M:cope.KeyValueXmlReader.ReadValue(System.Xml.XmlReader)">
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="T:cope.KeyValueXmlWriter">
            <summary>
            Provides functions to convert <c>KeyedValues</c> to XML.
            </summary>
        </member>
        <member name="M:cope.KeyValueXmlWriter.Write(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{cope.KeyedValue})">
            <summary>
            Writes the specified <c>KeyedValue</c> objects using the given <c>XmlWriter</c>.
            </summary>
            <param name="xmlWriter"></param>
            <param name="keyedData"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyedData" /> is <c>null</c>.</exception>
        </member>
        <member name="M:cope.KeyValueXmlWriter.Write(System.String,System.Collections.Generic.IEnumerable{cope.KeyedValue})">
            <summary>
            Tries to create a file at the given path and write the specified <c>KeyedValue</c> objects to the newly created
            file.
            </summary>
            <param name="path"></param>
            <param name="keyedValues"></param>
            <exception cref="T:cope.CopeException">Failed to create file to write KeyedValues to.</exception>
        </member>
        <member name="M:cope.KeyValueXmlWriter.Write(System.IO.Stream,System.Collections.Generic.IEnumerable{cope.KeyedValue})">
            <summary>
            Tries to write the specified <c>KeyValue</c> objects to the given stream.
            </summary>
            <param name="str"></param>
            <param name="keyedValues"></param>
            <exception cref="T:cope.CopeException">Failed to write KeyedValues.</exception>
        </member>
        <member name="M:cope.KeyValueXmlWriter.WriteData(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{cope.KeyedValue})">
            <exception cref="T:cope.CopeException">Failed to write KeyedValues as XML.</exception>
        </member>
        <member name="T:cope.MarsagliaRng">
            <summary>
            Implementation of Marsaglia's Random Number Generator
            </summary>
        </member>
        <member name="M:cope.MarsagliaRng.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new instance of MarsagliaRng using the specified values as seeds.
            </summary>
            <param name="seed1">The first seed. If not specified, 0xDEADBEEF is used.</param>
            <param name="seed2">The second seed. If not specified 0xCAFE1234 is used.</param>
        </member>
        <member name="M:cope.MarsagliaRng.GetUint">
            <summary>
            Returns a random unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.MarsagliaRng.GetUint(System.UInt32,System.UInt32)">
            <summary>
            Returns a random unsigned integer in the range [lower,upper).
            </summary>
            <param name="lower">The lower (inclusive) limit for the random value.</param>
            <param name="upper">The upper (exclusive) limit for the random value.</param>
            <returns></returns>
        </member>
        <member name="M:cope.MarsagliaRng.GetInt">
            <summary>
            Returns a random signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cope.MarsagliaRng.GetInt(System.Int32,System.Int32)">
            <summary>
            Returns a random signed integer in the range [lower,upper).
            </summary>
            <param name="lower">The lower (inclusive) limit for the random value.</param>
            <param name="upper">The upper (exclusive) limit for the random value.</param>
            <returns></returns>
        </member>
        <member name="T:cope.MutableTuple`2">
            <summary>
            Represents a tuple with mutable members, thus probably not suitable as a key into hashtables.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:cope.MutableTuple`2.#ctor(`0,`1)">
            <summary>
            Constructs a new mutable tuple from the two given values.
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="P:cope.MutableTuple`2.Item1">
            <summary>
            Gets or sets the first item of the tuple.
            </summary>
        </member>
        <member name="P:cope.MutableTuple`2.Item2">
            <summary>
            Gets or sets the second item of the tuple.
            </summary>
        </member>
        <member name="E:cope.MutableTuple`2.OnItem1Changed">
            <summary>
            This event fires when the first item has been changed.
            </summary>
        </member>
        <member name="E:cope.MutableTuple`2.OnItem2Changed">
            <summary>
            This event fires when the second item has been changed.
            </summary>
        </member>
        <member name="T:cope.PatriciaTree`1">
            <summary>
            Implements a patricia tree for strings.
            </summary>
        </member>
        <member name="P:cope.PatriciaTree`1.Node.Value">
            <summary>
            The value stored at this node.
            </summary>
        </member>
        <member name="P:cope.PatriciaTree`1.Node.IsEndOfWord">
            <summary>
            Whether this node marks the end of a word.
            </summary>
        </member>
        <member name="F:cope.PatriciaTree`1.Node.Substring">
            <summary>
            The substring at the edge leaving to this node.
            </summary>
        </member>
        <member name="F:cope.PatriciaTree`1.Node.Parent">
            <summary>
            The parent node of this node.
            </summary>
        </member>
        <member name="M:cope.PatriciaTree`1.NavigateToEnd(cope.PatriciaTree{`0}.Node,System.String,System.String@)">
            <summary>
            Navigates to the first node at which splitting is necessary, starting from
            the specified node.
            </summary>
            <param name="from"></param>
            <param name="item"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:cope.PatriciaTree`1.CollectFrom(cope.PatriciaTree{`0}.Node,System.String)">
            <summary>
            Collects all strings starting at a given node. Adds the given
            prefix to every string thus encountered.
            </summary>
            <param name="from"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:cope.PatriciaTree`1.GetWordsForPrefix(System.String)">
            <summary>
            Returns all words in the tree with the given prefix.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:cope.PatriciaTree`1.GetSuffixesForPrefix(System.String)">
            <summary>
            Returns all suffixes for a given prefix.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:cope.PatriciaTree`1.DropPrefix(System.String)">
            <summary>
            Drops all strings with a given prefix.
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:cope.PatriciaTree`1.ChangePrefix(System.String,System.String)">
            <summary>
            Replaces all entries that start with a given prefix with entries with
            the given other prefix. Overrides existing entries.
            </summary>
            <param name="oldPrefix"></param>
            <param name="newPrefix"></param>
        </member>
        <member name="M:cope.PatriciaTree`1.AddOrUpdate(cope.PatriciaTree{`0}.Node,System.String,`0,System.Boolean)">
            <summary>
            Adds or updates the given string at node. Returns true iff a new word was added.
            </summary>
            <param name="to"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="exceptionOnUpdate"></param>
        </member>
        <member name="M:cope.PatriciaTree`1.Add(System.String,`0)">
            <summary>
            Adds a key-value pair to the collection. Throws an exception if
            there already is an element with this key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:cope.PatriciaTree`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Adds a key-value pair to the collection. Throws an exception if
            there already is an element with this key.
            </summary>
        </member>
        <member name="T:cope.RepeatingEnumerator`1">
            <summary>
            Enumerator which repeats the enumeration of elements from a given IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:cope.RepeatingStream`1">
            <summary>
            An Enumerable type which keeps cycling through and returning values from another Enumerable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:cope.RepeatingStream`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a new InfiniteRepeatingStream which will return the items from the given IEnumerable.
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:cope.RepeatingStream`1.Values">
            <summary>
            Get the values that will be returned.
            </summary>
        </member>
        <member name="T:cope.ConstantStream`1">
            <summary>
            An Enumerable type which always returns the same value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:cope.ConstantStream`1.#ctor(`0)">
            <summary>
            Constructs a new ConstantStream repeating the given value.
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:cope.ConstantStream`1.Value">
            <summary>
            Gets the value that will be repeated ad infinitum.
            </summary>
        </member>
        <member name="T:cope.Slice`1">
            <summary>
            Class to iterate over slides of indexed sequences, IList.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:cope.Slice`1.Add(`0)">
            <summary>
            Does not make any sense for slices, throws a NotImplementedException.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
            <exception cref="T:System.NotImplementedException"><c>NotImplementedException</c>.</exception>
        </member>
        <member name="M:cope.Slice`1.Clear">
            <summary>
            Does not make any sense for slices, throws a NotImplementedException.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
            <exception cref="T:System.NotImplementedException"><c>NotImplementedException</c>.</exception>
        </member>
        <member name="M:cope.Slice`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:cope.Slice`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
            <exception cref="T:cope.CopeException">Could not copy Slice content because the target array did not provide enough space.</exception>
        </member>
        <member name="M:cope.Slice`1.Remove(`0)">
            <summary>
            Does not make any sense for slices, throws a NotImplementedException.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
            <exception cref="T:System.NotImplementedException"><c>NotImplementedException</c>.</exception>
        </member>
        <member name="P:cope.Slice`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:cope.Slice`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:cope.Slice`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:cope.Slice`1.Insert(System.Int32,`0)">
            <summary>
            Does not make any sense for slices, throws a NotImplementedException.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
            <exception cref="T:System.NotImplementedException"><c>NotImplementedException</c>.</exception>
        </member>
        <member name="M:cope.Slice`1.RemoveAt(System.Int32)">
            <summary>
            Does not make any sense for slices, throws a NotImplementedException.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
            <exception cref="T:System.NotImplementedException"><c>NotImplementedException</c>.</exception>
        </member>
        <member name="P:cope.Slice`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="T:cope.SliceArrayEnumerator`1">
            <summary>
            Enumerator used by Slices over arrays.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:cope.SliceEnumerator`1">
            <summary>
            Enumerator used by Slices in general.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:cope.User.GetCurrentUserName">
            <summary>
            Returns the current user's name or null if there's no current user.
            </summary>
            <returns></returns>
        </member>
        <member name="P:cope.PrintValueAttribute.Filter">
            <summary>
            Specify a filter: When calling GetPrintValues you can specify an array of filters, only those attributes whose filter value is
            in the array will be printed.
            </summary>
        </member>
        <member name="P:cope.PrintValueAttribute.FormatString">
            <summary>
            Provide a string to be used for formatting the attributed value.
            </summary>
        </member>
        <member name="T:cope.PrintValueExtension">
            <summary>
            Helper class to quickly pretty-print values annotated with the PrintValueAttribute.
            </summary>
        </member>
        <member name="M:cope.PrintValueExtension.GetPrintValues(System.Object,System.Int32)">
            <summary>
            Gets the print value of the specified object as a string. You may provide a level of indentation.
            </summary>
            <param name="o"></param>
            <param name="indentLevel"></param>
            <returns></returns>
        </member>
        <member name="M:cope.PrintValueExtension.GetPrintValues(System.Object,System.Int32,System.Int32[])">
            <summary>
            Gets all values with the PrintValueAttribute whose filter-property is in the specified filters array.
            </summary>
            <param name="o"></param>
            <param name="indentLevel"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:cope.PrintValueExtension.ProcessProperties(System.Text.StringBuilder,System.String,System.Object,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Processes all properties of a given object and checks whether they possess the PrintValueAttribute.
            If they do, it is checked that their filter is in the list of filters to be included. Also takes care
            of indentation.
            </summary>
            <param name="sb"></param>
            <param name="indent"></param>
            <param name="o"></param>
            <param name="filters"></param>
        </member>
        <member name="T:cope.SimpleSettings">
            <summary>
            XML-based simple settings format.
            </summary>
        </member>
        <member name="M:cope.SimpleSettings.Setting.#ctor(System.Xml.XmlNode,System.String@)">
            <exception cref="T:System.Exception">Tried to read Setting from XmlNode but there's no Attributes node!</exception>
        </member>
        <member name="P:cope.UI.DataGridViewNumTextBoxColumn.CellTemplate">
            <exception cref="T:System.InvalidCastException"><c>InvalidCastException</c>.</exception>
        </member>
        <member name="F:cope.UI.DoubleBufferedPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:cope.UI.DoubleBufferedPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:cope.UI.DoubleBufferedPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:cope.UI.DragBox`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:cope.UI.DragBox`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:cope.UI.DragBox`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:cope.UI.DragPlane.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:cope.UI.DragPlane.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:cope.UI.DragPlane.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:cope.UI.TabControlExt">
            <summary>
            Extends the TabControl with an event that is called when the tab's header gets clicked.
            </summary>
        </member>
        <member name="M:cope.UI.TabControlExt.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the OnMouseClick to first check whether or not the tab's header has been clicked.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:cope.Cantor">
            <summary>
            Implementation of the Cantor pairing function.
            http://en.wikipedia.org/wiki/Pairing_function
            </summary>
        </member>
        <member name="M:cope.Cantor.Compute(System.Int64,System.Int64)">
            <summary>
            Computes Z from X and Y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Cantor.ComputeX(System.Int64)">
            <summary>
            Computes X from Z.
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:cope.Cantor.ComputeY(System.Int64)">
            <summary>
            Computes Y from Z.
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:cope.Parser">
            <summary>
            Parsing numbers the safe way!
            </summary>
        </member>
        <member name="M:cope.Parser.ParseFloatSave(System.String)">
            <summary>
            Parses a string to a float by first trying to use the American decimal seperator ('.') and then the German (',').
            </summary>
            <param name="str">String to parse.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Parser.ParseFloat(System.String,System.String)">
            <summary>
            Parses a string to a float by using the specified decimal seperator.
            </summary>
            <param name="str">String to parse.</param>
            <param name="decimalSeperator">Decimal seperator to use.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Parser.ParseFloatInvariant(System.String)">
            <exception cref="T:cope.CopeException"><c>CopeException</c>.</exception>
        </member>
        <member name="M:cope.Parser.ParseDecimalSave(System.String)">
            <summary>
            Parses a string to a decimal by first trying to use the American decimal seperator ('.') and then the German (',').
            </summary>
            <param name="str">String to parse.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Parser.ParseDecimal(System.String,System.String)">
            <summary>
            Parses a string to a decimal by using the specified decimal seperator.
            </summary>
            <param name="str">String to parse.</param>
            <param name="decimalSeperator">Decimal seperator to use.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Parser.ParseDoubleSave(System.String)">
            <summary>
            Parses a string to a double by first trying to use the American decimal seperator ('.') and then the German (',').
            </summary>
            <param name="str">String to parse.</param>
            <returns></returns>
        </member>
        <member name="M:cope.Parser.ParseDouble(System.String,System.String)">
            <summary>
            Parses a string to a double by using the specified decimal seperator.
            </summary>
            <param name="str">String to parse.</param>
            <param name="decimalSeperator">Decimal seperator to use.</param>
            <returns></returns>
        </member>
        <member name="T:cope.MathUtil">
            <summary>
            Static class offering various useful mathematical functions.
            </summary>
        </member>
        <member name="M:cope.MathUtil.GCD(System.Double,System.Double)">
            <summary>
            Returns the Greatest Common Divisor of a and b.
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns></returns>
        </member>
        <member name="M:cope.MathUtil.LCM(System.Double,System.Double)">
            <summary>
            Returns the Least Common Multiple of a and b.
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns></returns>
        </member>
        <member name="M:cope.MathUtil.LinearInterpolation(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a linear interpolation between 0 and an upper bound.
            </summary>
            <param name="minOutput">The minimum value to return.</param>
            <param name="maxOutput">The maximum value to return.</param>
            <param name="value">The value to use for interpolation.</param>
            <param name="valueRange">The upper bound, that is the maximum value expected for value.</param>
            <returns></returns>
        </member>
        <member name="M:cope.MathUtil.LinearDeInterpolation(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs the reverse of a linear interpolation.
            </summary>
            <param name="minOutputOfInterpol">The minimum value the interpolation process may return.</param>
            <param name="maxOutputOfInterpol">The maximum value the interpolation process may return.</param>
            <param name="output">The actual output value returned by the interpolation process.</param>
            <param name="valueRange">The maximum value used by the interpolation process as an interpolation-value.</param>
            <returns></returns>
        </member>
        <member name="M:cope.MathUtil.Limit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Limits the specified value to certain inclusive bounds.
            </summary>
            <param name="value"></param>
            <param name="upperBound"></param>
            <param name="lowerBound"></param>
            <returns></returns>
        </member>
        <member name="M:cope.MathUtil.Ellipse(System.Double,System.Double,System.Double)">
            <summary>
            Assuming a half ellipse with its center in the origin this function returns the height at a specified x position.
            </summary>
            <param name="x"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
    </members>
</doc>
